#pragma once
/********************************************************************
//	Created:	2012/6/4  17:38
//	File Name: 	/BaseLib_Linux/BaseLib_SourceCode/BaseLib_Lib/BaseLib_PublicOperator/NetOperator_Define.h
//	File Path:	/BaseLib_Linux/BaseLib_SourceCode/BaseLib_Lib/BaseLib_PublicOperator/
//	File Base:	NetOperator_Define.h
//	File Ext:	h
//  Project:    NetSocketEngine(网络通信引擎) For Linux
//	Author:		dowflyon
//	Purpose:	导出的操作库函数
//	History:
*********************************************************************/
//////////////////////////////////////////////////////////////////////////
//                        导出的类型定义
//////////////////////////////////////////////////////////////////////////
#define XW2A(a,b,c) BaseLib_String_UnicodeToAnsi(a,b,c)
#define XA2W(a,b,c) BaseLib_String_AnsiToUnicode(a,b,c)
//////////////////////////////////////////////////////////////////////////////////
//                         回调函数
//////////////////////////////////////////////////////////////////////////////////
//触发器ID,触发器设置的时间,触发器当前次数(-1 或者剩余次数),自定义参数
typedef void(CALLBACK* CALLBACK_XENGINE_LIB_BASELIB_TIME_TRIGGER)(int nIDEvent, LPCXSTR lpszTimeStr, __int64x nTimeOffset, int nTTNumber, XPVOID lParam);
//////////////////////////////////////////////////////////////////////////////////
//                         导出的类型定义
//////////////////////////////////////////////////////////////////////////////////
//时间类型
typedef enum
{
    ENUM_XENGINE_BASELIB_TIME_TYPE_TIME = 0,                           //完整时间
    ENUM_XENGINE_BASELIB_TIME_TYPE_YEAR = 1,                           //年
    ENUM_XENGINE_BASELIB_TIME_TYPE_MONTH = 2,                          //月
    ENUM_XENGINE_BASELIB_TIME_TYPE_DAY = 3,                            //日 
    ENUM_XENGINE_BASELIB_TIME_TYPE_HOUR = 10,                          //时
    ENUM_XENGINE_BASELIB_TIME_TYPE_MINUTE = 11,                        //分
    ENUM_XENGINE_BASELIB_TIME_TYPE_SECOND = 12,                        //秒
    ENUM_XENGINE_BASELIB_TIME_TYPE_MILLI = 20,                         //毫
    ENUM_XENGINE_BASELIB_TIME_TYPE_MICRO = 21,                         //微
    ENUM_XENGINE_BASELIB_TIME_TYPE_NANO = 22                           //纳
}ENUM_XENGINE_BASELIB_TIME_TYPE;
//////////////////////////////////////////////////////////////////////////////////
//                         导出的数据结构
//////////////////////////////////////////////////////////////////////////////////
typedef struct
{
    time_t tv_sec;
    __int64u tv_usec;
    __int64u tv_value;
}XENGINE_VALTIME;
//KEY VALUE
typedef struct
{
    XCHAR tszStrKey[XPATH_MAX];
    XCHAR tszStrVlu[XPATH_MAX];
}XENGINE_KEYVALUE;
//时间信息结构
typedef struct
{
    int wYear;                                                                    //年
    int wMonth;                                                                   //月
    int wDay;                                                                     //日
    int wHour;                                                                    //小时
    int wMinute;                                                                  //分钟
    int wSecond;                                                                  //秒
    __int64x wMicroseconds;                                                        //微妙
    int wDayofYear;                                                               //一年的某一天
    int wDayofWeek;                                                               //一周的星期几
    int wFlags;                                                                   //公历中表示夏令时标志,阴历中表示闰年
}XENGINE_LIBTIME, * LPXENGINE_LIBTIME;
XENGINE_API_EXPORT_DEPRECATED typedef XENGINE_LIBTIME XENGINE_LIBTIMER;
XENGINE_API_EXPORT_DEPRECATED typedef LPXENGINE_LIBTIME LPXENGINE_LIBTIMER;
//版本号
typedef struct  
{
    unsigned short int nVerCore;                                                  //核心版本号
    unsigned short int nVerMain;                                                  //主版本号
    unsigned short int nVerSub;                                                   //次版本号
    unsigned short int nVerFix;                                                   //修复版本号
    ENUM_XENGINE_VERSION_TYPE enVType;                                            //版本类型
}XENGINE_LIBVERSION, * LPXENGINE_LIBVERSION;
//时间触发器
typedef struct 
{
    ENUM_XENGINE_BASELIB_TIME_TYPE enTiggerType;                                  //触发器类型
    XCHAR tszTimeStr[128];                                                        //根据类型表示值,比如0 那么就是完整时间格式:2025-04-23 10:00:01.如果是12,那么值就是数值,秒
    int nTiggerCount;                                                             //触发器触发次数.为-1表示一直触发,为0不触发
}XENGINE_LIBTIGGER;
//////////////////////////////////////////////////////////////////////////////////
//                         导出的函数
//////////////////////////////////////////////////////////////////////////////////
extern "C" XLONG BaseLib_GetLastError(int *pInt_SysError = NULL);
/*********************************************************************************
*                          事件管理器导出的函数                                     *
*********************************************************************************/
/********************************************************************
函数名称：BaseLib_Event_Create
函数功能：创建一个事件
 参数.一：bActiveMode
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：事件模式,自动还是手动,默认手动
返回值
  类型：逻辑型
  意思：是否成功
备注：如果是自动模式,需要使用BaseLib_Event_Reset来设置为无信号状态.否则会一直触发
*********************************************************************/
extern "C" XEVENT BaseLib_Event_Create(bool bActiveMode = false);
/********************************************************************
函数名称：BaseLib_Event_Wait
函数功能：等待一个事件被激活
 参数.一：xhEvent
  In/Out：In
  类型：句柄
  可空：N
  意思：要等待的事件句柄
返回值
  类型：逻辑型
  意思：是否等待成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Event_Wait(XEVENT xhEvent);
/********************************************************************
函数名称：BaseLib_Event_WaitTimedOut
函数功能：超时等待事件
 参数.一：xhEvent
  In/Out：In
  类型：句柄
  可空：N
  意思：要等待的事件句柄
 参数.二：nTimeOut
  In/Out：In
  类型：整数型
  可空：N
  意思：等待超时的时间，时间为毫秒
返回值
  类型：逻辑型
  意思：是否等待成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Event_WaitTimedOut(XEVENT xhEvent,int nTimeOut);
/********************************************************************
函数名称：BaseLib_Event_Avtive
函数功能：激活一个等待的事件
 参数.一：xhEvent
  In/Out：In
  类型：句柄
  可空：N
  意思：要激活的事件句柄
返回值
  类型：逻辑型
  意思：是否激活成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Event_Avtive(XEVENT xhEvent);
/********************************************************************
函数名称：BaseLib_Event_Reset
函数功能：重置事件
 参数.一：xhEvent
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要重置的事件句柄
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Event_Reset(XEVENT xhEvent);
/********************************************************************
函数名称：BaseLib_Event_Delete
函数功能：删除一个事件
 参数.一：xhEvent
  In/Out：In
  类型：句柄
  可空：N
  意思：要删除的事件句柄
返回值
  类型：逻辑型
  意思：是否成功删除一个事件
备注：
*********************************************************************/
extern "C" bool BaseLib_Event_Delete(XEVENT xhEvent);
//信号操作，可以支持队列
/********************************************************************
函数名称：BaseLib_Semaphore_Create
函数功能：创建一个信号量
 参数.一：lpszSemaphoreName
  In/Out：In
  类型：常量字符指针
  可空：Y
  意思：输入信号量名称,这个值可以和BaseLib_Semaphore_IsExist做进程互斥
 参数.二：nMaxCount
  In/Out：In
  类型：整数型
  可空：Y
  意思：最大允许信号个数
返回值
  类型：句柄
  意思：返回创建成功的句柄,失败返回NULL
备注：
*********************************************************************/
extern "C" XEVENT BaseLib_Semaphore_Create(LPCXSTR lpszSemaphoreName = NULL, int nMaxCount = 65535);
/********************************************************************
函数名称：BaseLib_Semaphore_IsExist
函数功能：判断一个信号量是否存在
 参数.一：lpszSemaphoreName
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入要判断的信号名称
返回值
  类型：逻辑型
  意思：存在返回真,不存在返回假
备注：这个函数可以用来做进程间的互斥
*********************************************************************/
extern "C" bool BaseLib_Semaphore_IsExist(LPCXSTR lpszSemaphoreName);
/********************************************************************
函数名称：BaseLib_Semaphore_Wait
函数功能：超时等待事件
 参数.一：xhEvent
  In/Out：In
  类型：句柄
  可空：N
  意思：要等待的事件句柄
 参数.二：nTimeOut
  In/Out：In
  类型：整数型
  可空：Y
  意思：等待超时的时间，时间毫秒,默认不超时
返回值
  类型：逻辑型
  意思：是否等待成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Semaphore_Wait(XEVENT xhEvent, int nTimeOut = -1);
/********************************************************************
函数名称：BaseLib_Semaphore_Avtive
函数功能：激活一个等待的事件
 参数.一：xhEvent
  In/Out：In
  类型：句柄
  可空：N
  意思：要激活的事件句柄
 参数.二：pInt_Count
  In/Out：Out
  类型：整数型指针
  可空：Y
  意思：输出待处理的信号次数,macos不支持
返回值
  类型：逻辑型
  意思：是否激活成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Semaphore_Avtive(XEVENT xhEvent, int* pInt_Count = NULL);
/********************************************************************
函数名称：BaseLib_Semaphore_Delete
函数功能：删除一个事件
 参数.一：xhEvent
  In/Out：In
  类型：句柄
  可空：N
  意思：要删除的事件句柄
返回值
  类型：逻辑型
  意思：是否成功删除一个事件
备注：
*********************************************************************/
extern "C" bool BaseLib_Semaphore_Delete(XEVENT xhEvent);
/*********************************************************************************
*                          句柄管理器导出的函数                                  *
*********************************************************************************/
/********************************************************************
函数名称：BaseLib_Handle_Create
函数功能：创建一个网络句柄
 参数.一：pxhNet
  In/Out：Out
  类型：网络句柄
  可空：N
  意思：导出一个创建成功的网络句柄
 参数.二：nStartRange
  In/Out：In
  类型：整数型
  可空：Y
  意思：最低开始句柄随机数范围
 参数.三：nEndRange
  In/Out：In
  类型：整数型
  可空：Y
  意思：最高结束句柄随机数范围
 参数.四：bAuto
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：自动处理,保证不重复
返回值
  类型：逻辑型
  意思：是否创建成功
备注：创建独立的句柄，将没有对应的值
*********************************************************************/
extern "C" bool BaseLib_Handle_Create(PXNETHANDLE pxhNet, __int64x nStartRange = 1000000001, __int64x nEndRange = 9000000002, bool bAuto = true);
/********************************************************************
函数名称：BaseLib_Handle_CreateStr
函数功能：创建指定位数随机字符串
 参数.一：ptszKey
  In/Out：Out
  类型：字符指针
  可空：N
  意思：输出创建后的值
 参数.二：nSize
  In/Out：In
  类型：整数型
  可空：Y
  意思：输入要创建多少位
 参数.三：nType
  In/Out：In
  类型：整数型
  可空：Y
  意思：创建类型,默认0随机,1为全数字,2为全字母
 参数.四：nCharType
  In/Out：In
  类型：整数型
  可空：Y
  意思：字母类型,0为随机,1全部大写,2全部小写
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Handle_CreateStr(XCHAR* ptszKey, int nSize = 16, int nType = 0, int nCharType = 0);
/********************************************************************
函数名称：BaseLib_Handle_CreateGuid
函数功能：生成一个GUID字符串
 参数.一：ptszMsgBuffer
  In/Out：Out
  类型：字符指针
  可空：N
  意思：导出的缓冲区
 参数.二：bLine
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：是否添加-,默认添加
 参数.三：bUPPer
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：是否使用大写,默认导出字母为大写
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Handle_CreateGuid(XCHAR *ptszMsgBuffer, bool bLine = true, bool bUPPer = true);
/*********************************************************************************
*                          字符集转换导出                                        *
*********************************************************************************/
/********************************************************************
函数名称：BaseLib_Charset_AnsiToUnicode
函数功能：转换函数
 参数.一：lpszSourceStr
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：要转换的字符串
 参数.二：ptszDestStr
  In/Out：In
  类型：字符指针
  可空：N
  意思：转换到的字符串
 参数.三：pInt_Len
  In/Out：In
  类型：整数型指针
  可空：Y
  意思：输入原始字符串大小,输出转换后的字符串大小.为NULL或者0自动计算
 参数.四：lpszDstCode
  In/Out：In
  类型：常量字符指针
  可空：Y
  意思：转换到的字符编码类型
返回值
  类型：字符指针
  意思：输出转换后的字符串
备注：char转wchar_t
*********************************************************************/
extern "C" wchar_t* BaseLib_Charset_AnsiToUnicode(LPCXSTR lpszSourceStr, wchar_t* ptszDestStr, int* pInt_Len = NULL);
/********************************************************************
函数名称：BaseLib_Charset_UnicodeTOAnsi
函数功能：转换函数
 参数.一：lpszSourceStr
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：要转换的字符串
 参数.二：ptszDestStr
  In/Out：In
  类型：字符指针
  可空：N
  意思：转换到的字符串
 参数.三：pInt_Len
  In/Out：In
  类型：整数型指针
  可空：Y
  意思：输入原始字符串大小,输出转换后的字符串大小.为NULL或者0自动计算
 参数.四：lpszDstCode
  In/Out：In
  类型：常量字符指针
  可空：Y
  意思：转换到的字符编码类型
返回值
  类型：字符指针
  意思：输出转换后的字符串
备注：wchar_t转char
*********************************************************************/
extern "C" char* BaseLib_Charset_UnicodeToAnsi(const wchar_t* lpszSourceStr, char* ptszDestStr, int* pInt_Len = NULL);
/********************************************************************
函数名称：BaseLib_Charset_AnsiToUTF
函数功能：ANSI GBK转UTF-8
 参数.一：lpszSourceStr
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：要转换的字符串
 参数.二：ptszDestStr
  In/Out：In
  类型：字符指针
  可空：N
  意思：转换到的字符串
 参数.三：pInt_Len
  In/Out：In
  类型：整数型指针
  可空：Y
  意思：输入原始字符串大小,输出转换后的字符串大小.为NULL或者0自动计算
返回值
  类型：字符指针
  意思：输出转换后的字符串
备注：
*********************************************************************/
extern "C" char* BaseLib_Charset_AnsiToUTF(LPCXSTR lpszSourceStr, char* ptszDestStr, int* pInt_Len = NULL);
/********************************************************************
函数名称：BaseLib_Charset_UTFToAnsi
函数功能：UTF-8转GBK
 参数.一：lpszSourceStr
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：要转换的字符串
 参数.二：ptszDestStr
  In/Out：In
  类型：字符指针
  可空：N
  意思：转换到的字符串
 参数.三：pInt_Len
  In/Out：In
  类型：整数型指针
  可空：Y
  意思：输入原始字符串大小,输出转换后的字符串大小.为NULL或者0自动计算
返回值
  类型：字符指针
  意思：输出转换后的字符串
备注：
*********************************************************************/
extern "C" char* BaseLib_Charset_UTFToAnsi(LPCXSTR lpszSourceStr, char* ptszDestStr, int* pInt_Len = NULL);
/********************************************************************
函数名称：BaseLib_Charset_UnicodeToUTF
函数功能：UNICODE转UTF8
 参数.一：lpszSourceStr
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：要转换的字符串
 参数.二：ptszDestStr
  In/Out：In
  类型：字符指针
  可空：N
  意思：转换到的字符串
 参数.三：pInt_Len
  In/Out：In
  类型：整数型指针
  可空：Y
  意思：输入原始字符串大小,输出转换后的字符串大小.为NULL或者0自动计算
返回值
  类型：字符指针
  意思：输出转换后的字符串
备注：
*********************************************************************/
extern "C" char* BaseLib_Charset_UnicodeToUTF(const wchar_t* lpszSourceStr, char* ptszDestStr, int* pInt_Len = NULL);
/********************************************************************
函数名称：BaseLib_Charset_UTFToUnicode
函数功能：UTF8转UNICODE
 参数.一：lpszSourceStr
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：要转换的字符串
 参数.二：ptszDestStr
  In/Out：In
  类型：字符指针
  可空：N
  意思：转换到的字符串
 参数.三：pInt_Len
  In/Out：In
  类型：整数型指针
  可空：Y
  意思：输入原始字符串大小,输出转换后的字符串大小.为NULL或者0自动计算
返回值
  类型：字符指针
  意思：输出转换后的字符串
备注：
*********************************************************************/
extern "C" wchar_t* BaseLib_Charset_UTFToUnicode(LPCXSTR lpszSourceStr, wchar_t* ptszDestStr, int* pInt_Len = NULL);
/********************************************************************
函数名称：BaseLib_Charset_CharConvert
函数功能：转换核心函数
 参数.一：ptszSrc
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：要转换的字符串
 参数.二：ptszDst
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：转换到的字符串
 参数.三：nSrcLen
  In/Out：In
  类型：整数型
  可空：N
  意思：要转换字符串大小
 参数.四：pInt_DstLen
  In/Out：In
  类型：整数型指针
  可空：N
  意思：转到后的输出大小
 参数.五：lpszSrcCode
  In/Out：In
  类型：常量字符指针
  可空：Y
  意思：原始字符编码类型
 参数.六：lpszDstCode
  In/Out：In
  类型：常量字符指针
  可空：Y
  意思：转换到的字符编码类型
返回值
  类型：逻辑型
  意思：是否转换成功
备注：更多原始和目标转换字符集参数可以参考:https://www.gnu.org/software/libiconv/
*********************************************************************/
extern "C" bool BaseLib_Charset_CharConvert(char* ptszSrc, char* ptszDst, size_t nSrcLen, size_t* pInt_DstLen, LPCXSTR lpszSrcCode, LPCXSTR lpszDstCode);
/*********************************************************************************
*                          字符串操作导出的函数                                  *
*********************************************************************************/
/********************************************************************
函数名称：BaseLib_String_DelSub
函数功能：从一个指定的字符串中删除指定字符串
 参数.一：ptszSource
  In/Out：In/Out
  类型：字符指针
  可空：N
  意思：输入：待删除的字符串缓冲区，导出，删除后的字符串
 参数.二：lpszDelString
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：要删除的字符串
 参数.三：bDelAll
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：是否删除所有指定的字符串
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
#define BaseLib_String_DelSub BaseLib_String_DelSubA
extern "C" bool BaseLib_String_DelSubA(char* ptszSource, const char* lpszDelString, bool bDelAll = true);
extern "C" bool BaseLib_String_DelSubW(wchar_t* ptszSource, const wchar_t* lpszDelString, bool bDelAll = true);
/********************************************************************
函数名称：BaseLib_String_Change
函数功能：从一个指定的缓冲区中查找开始和结束位置的中间进行字符串修改和插入操作
 参数.一：ptszSource
  In/Out：In/Out
  类型：字符指针
  可空：N
  意思：导入原始字符串，导出操作成功后的字符串
 参数.二：pInt_Len
  In/Out：In/Out
  类型：整数型指针
  可空：N
  意思：输入原始字符串长度，输出修改后字符串长度
 参数.三：lpszChange
  In/Out：Out
  类型：常量字符指针
  可空：N
  意思：要修改或者插入的字符串
 参数.四：lpszStart
  In/Out：Out
  类型：常量字符指针
  可空：Y
  意思：要查找的开始字符串
 参数.五：lpszEnd
  In/Out：Out
  类型：常量字符指针
  可空：Y
  意思：要查找的结束字符串
 参数.六：bMixMatch
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：是否启用最小匹配,启用后将会一直搜索到匹配到的最小索引
返回值
  类型：逻辑型
  意思：是否改变成功
备注：
*********************************************************************/
#define BaseLib_String_Change BaseLib_String_ChangeA
extern "C" bool BaseLib_String_ChangeA(char* ptszSource, int* pInt_Len, const char* lpszChange, const char* lpszStart = NULL, const char* lpszEnd = NULL, bool bMixMatch = false);
extern "C" bool BaseLib_String_ChangeW(wchar_t* ptszSource, int* pInt_Len, const wchar_t* lpszChange, const wchar_t* lpszStart = NULL, const wchar_t* lpszEnd = NULL, bool bMixMatch = false);
/********************************************************************
函数名称：BaseLib_String_Replace
函数功能：文本替换
 参数.一：ptszSource
  In/Out：In/Out
  类型：字符指针
  可空：N
  意思：输入修改前的内容,输出修改后的内容
 参数.二：pInt_Len
  In/Out：In
  类型：整数型指针
  可空：N
  意思：输出替换后的字符串长度
 参数.三：lpszSourceStr
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入要替换的字符串
 参数.四：lpszDestStr
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入修改的字符串
 参数.五：bAllReplace
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：全部替换还是只替换第一次匹配的
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
#define BaseLib_String_Replace BaseLib_String_ReplaceA
extern "C" bool BaseLib_String_ReplaceA(char* ptszSource, int* pInt_Len, const char* lpszSourceStr, const char* lpszDestStr, bool bAllReplace = false);
extern "C" bool BaseLib_String_ReplaceW(wchar_t* ptszSource, int* pInt_Len, const wchar_t* lpszSourceStr, const wchar_t* lpszDestStr, bool bAllReplace = false);
/********************************************************************
函数名称：BaseLib_String_GetStartEndA
函数功能：通过开始和结束字符串获取中间的字符串
 参数.一：lpszSource
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：要获取的源字符串内容
 参数.二：ptszDest
  In/Out：Out
  类型：字符指针
  可空：N
  意思：获取到的字符串保存位置
 参数.三：lpszStart
  In/Out：In
  类型：常量字符指针
  可空：Y
  意思：开始字符串
 参数.四：lpszEnd
  In/Out：In
  类型：常量字符指针
  可空：Y
  意思：结束字符串
 参数.五：bMixMatch
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：是否启用最小匹配,启用后将会一直搜索到匹配到的最小索引
返回值
  类型：逻辑型
  意思：是否获取成功
备注：
*********************************************************************/
#define BaseLib_String_GetStartEnd BaseLib_String_GetStartEndA
extern "C" bool BaseLib_String_GetStartEndA(const char* lpszSource, char* ptszDest, const char* lpszStartStr = NULL, const char* lpszEndStr = NULL, bool bMixMatch = false);
extern "C" bool BaseLib_String_GetStartEndW(const wchar_t* lpszSource, wchar_t* ptszDest, const wchar_t* lpszStartStr = NULL, const wchar_t* lpszEndStr = NULL, bool bMixMatch = false);
/********************************************************************
函数名称：BaseLib_String_GetFileAndPath
函数功能：通过URL获取文件路径和文件名
 参数.一：lpszUrl
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：路径地址
 参数.二：ptszPath
  In/Out：Out
  类型：字符指针
  可空：Y
  意思：全路径
 参数.三：ptszFile
  In/Out：Out
  类型：字符指针
  可空：Y
  意思：文件名称
 参数.四：ptszDrive
  In/Out：Out
  类型：字符指针
  可空：Y
  意思：驱动器名称
 参数.五：ptszFileExt
  In/Out：Out
  类型：字符指针
  可空：Y
  意思：文件扩展名
 参数.六：bOnlyName
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：设置ptszFile导出的只有名字没有扩展名
返回值
  类型：逻辑型
  意思：是否获取成功
备注：
*********************************************************************/
#define BaseLib_String_GetFileAndPath BaseLib_String_GetFileAndPathA
extern "C" bool BaseLib_String_GetFileAndPathA(const char* lpszUrl, char* ptszPath = NULL, char* ptszFile = NULL, char* ptszDrive = NULL, char* ptszFileExt = NULL, bool bOnlyName = false);
extern "C" bool BaseLib_String_GetFileAndPathW(const wchar_t* lpszUrl, wchar_t* ptszPath = NULL, wchar_t* ptszFile = NULL, wchar_t* ptszDrive = NULL, wchar_t* ptszFileExt = NULL, bool bOnlyName = false);
/********************************************************************
函数名称：BaseLib_String_GetKeyValueA
函数功能：通过一个字符串，从一段字符串中分割出前后两个内容
 参数.一：lpszSource
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：要分割的字符串
 参数.二：lpszSqlit
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：作为分割的字符串
 参数.三：ptszKey
  In/Out：Out
  类型：字符指针
  可空：Y
  意思：导出分割之前的部分
 参数.四：ptszValue
  In/Out：Out
  类型：字符指针
  可空：Y
  意思：导出分割之后的部分
 参数.五：bBreak
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：是否跳过首位空格
 参数.六：pInt_Hdr
  In/Out：Out
  类型：整数指针
  可空：Y
  意思：导出HTTP头的长度
 参数.七：pInt_Body
  In/Out：Out
  类型：整数指针
  可空：Y
  意思：导出HTTP内容长度
返回值
  类型：逻辑型
  意思：是否分割成功
备注：
*********************************************************************/
#define BaseLib_String_GetKeyValue BaseLib_String_GetKeyValueA
extern "C" bool BaseLib_String_GetKeyValueA(const char* lpszSource, const char* lpszSqlit, char* ptszKey = NULL, char* ptszValue = NULL, bool bBreak = true, int* pInt_Hdr = NULL, int* pInt_Body = NULL);
extern "C" bool BaseLib_String_GetKeyValueW(const wchar_t* lpszSource, const wchar_t* lpszSqlit, wchar_t* ptszKey = NULL, wchar_t* ptszValue = NULL, bool bBreak = true, int* pInt_Hdr = NULL, int* pInt_Body = NULL);
/********************************************************************
函数名称：BaseLib_String_FixPath
函数功能：修复路径字符串
 参数.一：ptszStrBuffer
  In/Out：In/Out
  类型：字符指针
  可空：N
  意思：输入要修改的路径缓冲区,输出修复好的缓冲区
 参数.二：nType
  In/Out：In
  类型：整数型
  可空：Y
  意思：输入要处理的路径,0,自动,1使用绝对路径,2使用相对路径
 参数.三：nRelativeCount
  In/Out：In
  类型：整数型
  可空：Y
  意思：如果大于0,那么绝对路径将被修改为相对路径,并且设置相对路径保留的路径数
返回值
  类型：逻辑型
  意思：是否成功
备注：通过此函数可以修正对于绝对路径或者相对路径中出现其他路径标识符的问题
      比如 C:\\aa/b.txt 可以修复为C:\\aa\\b.txt
*********************************************************************/
#define BaseLib_String_FixPath BaseLib_String_FixPathA
extern "C" bool BaseLib_String_FixPathA(char* ptszStrBuffer, int nType = 0, int nRelativeCount = 0);
extern "C" bool BaseLib_String_FixPathW(wchar_t* ptszStrBuffer, int nType = 0, int nRelativeCount = 0);
/********************************************************************
函数名称：BaseLib_String_GetPath
函数功能：获取路径字符串类型
 参数.一：lpszMsgBuffer
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入要处理的缓冲区
 参数.二：pInt_Type
  In/Out：Out
  类型：整数型指针
  可空：Y
  意思：输入要处理的路径,1绝对路径,2相对路径
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_String_GetPath(LPCXSTR lpszMsgBuffer, int* pInt_Type = NULL);
/********************************************************************
函数名称：BaseLib_String_GetSeparatorStr
函数功能：分割字符串
 参数.一：lpszMsgBuffer
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入要操作的字符串
 参数.二：lpszStr
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入分隔符
 参数.三：ptszMsgBuffer
  In/Out：Out
  类型：字符指针
  可空：N
  意思：输出查找分割后的字符串
 参数.四：nTimeNumber
  In/Out：In
  类型：整数型
  可空：Y
  意思：输入分隔符查找次数
 参数.五：bHdr
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：输入从头开始还是从尾开始
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
#define BaseLib_String_GetSeparatorStr BaseLib_String_GetSeparatorStrA
extern "C" bool BaseLib_String_GetSeparatorStrA(const char* lpszMsgBuffer, const char* lpszStr, char* ptszMsgBuffer, int nTimeNumber = 1, bool bHdr = true);
extern "C" bool BaseLib_String_GetSeparatorStrW(const wchar_t* lpszMsgBuffer, const wchar_t* lpszStr, wchar_t* ptszMsgBuffer, int nTimeNumber = 1, bool bHdr = true);
/********************************************************************
函数名称：BaseLib_String_StrToHex
函数功能：字符串转十六进制
 参数.一：lpszSource
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：要转换的字符串
 参数.二：nSrcLen
  In/Out：In
  类型：整数型
  可空：N
  意思：字符串长度
 参数.三：ptszDest
  In/Out：Out
  类型：字符指针
  可空：N
  意思：导出16进制字符串
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_String_StrToHex(LPCXSTR lpszSource, int nSrcLen, XCHAR *ptszDest);
/********************************************************************
函数名称：BaseLib_String_HexToStr
函数功能：十六进制转字符串
 参数.一：lpszSource
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：要转换的缓冲区
 参数.二：nSrcLen
  In/Out：In
  类型：整数型
  可空：N
  意思：缓冲区长度
 参数.三：ptszDest
  In/Out：Out
  类型：字符指针
  可空：N
  意思：导出字符串
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_String_HexToStr(LPCXSTR lpszSource, int nSrcLen, XCHAR *ptszDest);
/*********************************************************************************
*                          时间操作导出的函数                                       *
*********************************************************************************/
/********************************************************************
函数名称：BaseLib_Time_GetTimeOfday
函数功能：与LINUX gettimeofday 函数功能相同，意思参考LINUX的。
返回值
  类型：逻辑型
  意思：是否获取成功
备注：参数二被省略了，默认为NULL
*********************************************************************/
extern "C" bool BaseLib_Time_GetTimeOfday(XENGINE_VALTIME * pSt_Timeval);
/********************************************************************
函数名称：BaseLib_Time_GetSysTime
函数功能：获取系统时间
 参数.一：pSt_LibTimer
  In/Out：Out
  类型：数据结构指针
  可空：N
  意思：导出时间信息
返回值
  类型：逻辑型
  意思：是否获取成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Time_GetSysTime(LPXENGINE_LIBTIME pSt_LibTimer);
/********************************************************************
函数名称：BaseLib_Time_GetTickCount
函数功能：获取系统开机以来的毫秒数
 参数.一：b64BIt
  In/Out：Out
  类型：字符指针
  可空：N
  意思：导出获取到的GMT时间格式字符串
返回值
  类型：无符号长长整型
  意思：返回毫秒数
备注：这个函数没有错误处理，和WINDOWS效果一样
*********************************************************************/
extern "C" __int64u BaseLib_Time_GetTickCount(bool b64BIt = false);
extern "C" __int64u BaseLib_Time_GetTickCount64();
/********************************************************************
函数名称：BaseLib_Time_TimeToStr
函数功能：时间结构转字符串
 参数.一：ptszYMDTimer
  In/Out：Out
  类型：字符指针
  可空：N
  意思：导出时间的年月日,如果bIsCombo为真那么将导出完整的时间格式字符串
 参数.二：ptszHMSTimer
  In/Out：Out
  类型：字符指针
  可空：Y
  意思：导出时间的时分秒结构
 参数.三：bIsCombo
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：参数一是否打包成完整时间
 参数.四：pSt_Timer
  In/Out：In
  类型：数据结构指针
  可空：Y
  意思：输入要转换的时间,为NULL获取当前时间
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Time_TimeToStr(XCHAR* ptszYMDTimer, XCHAR * ptszHMSTimer = NULL, bool bIsCombo = true, XENGINE_LIBTIME* pSt_Timer = NULL);
/********************************************************************
函数名称：BaseLib_Time_StrToTime
函数功能：字符串转结构体
 参数.一：lpszTimer
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入要转换的时间格式%d-%d-%d %d:%d:%d
 参数.二：pSt_LibTimer
  In/Out：Out
  类型：数据结构指针
  可空：N
  意思：导出转换成功的格式
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Time_StrToTime(LPCXSTR lpszTimer, XENGINE_LIBTIME* pSt_LibTimer);
/********************************************************************
函数名称：BaseLib_Time_TTimeToStuTime
函数功能：TIME时间转数据结构时间
 参数.一：ulTimer
  In/Out：In
  类型：无符号长整数型
  可空：N
  意思：要转换的TIME获取或者返回的时间
 参数.二：pSt_LibTimer
  In/Out：Out
  类型：数据结构指针
  可空：N
  意思：输出TIME的数据结构时间
返回值
  类型：逻辑型
  意思：是否转换成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Time_TTimeToStuTime(time_t ulTimer,LPXENGINE_LIBTIME pSt_LibTimer);
/********************************************************************
函数名称：BaseLib_Time_StuTimeToTTime
函数功能：时间结构转TIME时间
 参数.一：pSt_LibTimer
  In/Out：In
  类型：数据结构指针
  可空：N
  意思：输入要转换的时间
 参数.二：pulTimer
  In/Out：Out
  类型：时间指针
  可空：N
  意思：导出转换后的数据
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Time_StuTimeToTTime(LPXENGINE_LIBTIME pSt_LibTimer, time_t* pulTimer);
/********************************************************************
函数名称：BaseLib_Time_StrToInt
函数功能：字符串转整数型时间
 参数.一：lpszTimeStr
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入要转换的字符串
 参数.二：pInt_Time
  In/Out：Out
  类型：整数型指针
  可空：N
  意思：输出转换后的时间
返回值
  类型：逻辑型
  意思：是否成功
备注：时间字符串; 2021-6-09 22:1:03  转换为: 20210609221003
*********************************************************************/
extern "C" bool BaseLib_Time_StrToInt(LPCXSTR lpszTimeStr, __int64x * pInt_Time);
/********************************************************************
函数名称：BaseLib_Time_IntToStr
函数功能：整数转字符串
 参数.一：nTime
  In/Out：In
  类型：整数型
  可空：N
  意思：输入要转换的数值
 参数.二：ptszTime
  In/Out：Out
  类型：字符指针
  可空：N
  意思：输出转换后的字符串
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Time_IntToStr(__int64x nTime, XCHAR* ptszTime);
/********************************************************************
函数名称：BaseLib_Time_SetXTPTime
函数功能：设置指定参数为XTP时间格式
 参数.一：pxhXTPTime
  In/Out：Out
  类型：时间句柄指针
  可空：N
  意思：输出设置成功后的时间格式
返回值
  类型：逻辑型
  意思：是否成功
备注：XTP为XENGINE专用时间格式,用于生成当前时间
      XTP高32位为当前UTC时间秒.低32位为UTC时间的微妙
*********************************************************************/
extern "C" bool BaseLib_Time_SetXTPTime(XNETHANDLE * pxhXTPTime);
/********************************************************************
函数名称：BaseLib_Time_GetXTPTime
函数功能：转换指定XTP时间为当前显示时间
 参数.一：xhXTPTime
  In/Out：In
  类型：时间句柄
  可空：N
  意思：输出设置成功后的时间格式
 参数.二：pSt_LibTimer
  In/Out：Out
  类型：数据结构指针
  可空：Y
  意思：输出转换后的时间
 参数.三：pnTTimer
  In/Out：Out
  类型：时间型
  可空：Y
  意思：输出time时间值,这个值将不包括微妙
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Time_GetXTPTime(XNETHANDLE xhXTPTime, XENGINE_LIBTIME * pSt_LibTimer = NULL, time_t * pnTTimer = NULL);
/********************************************************************
函数名称：BaseLib_Time_TimezoneCvt
函数功能：时区转换
 参数.一：pSt_LibTimer
  In/Out：In/Out
  类型：数据结构指针
  可空：N
  意思：输入要转换的时间结构,输出转换成功的时间结构
 参数.二：nTimeHour
  In/Out：In
  类型：整数型
  可空：N
  意思：输入时间差
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Time_TimezoneCvt(XENGINE_LIBTIME * pSt_LibTimer, int nTimeHour);
/********************************************************************
函数名称：BaseLib_Time_TimezoneGet
函数功能：获取时区
 参数.一：pbZone
  In/Out：Out
  类型：逻辑型
  可空：N
  意思：输出时间+ 还是 -,真为+
 参数.二：pInt_Hour
  In/Out：Out
  类型：整数型指针
  可空：N
  意思：输出操作的小时,比如+8
 参数.三：pInt_Minute
  In/Out：Out
  类型：整数型指针
  可空：Y
  意思：输出操作的分钟,大部分情况都是0
 参数.四：nTime
  In/Out：In
  类型：整数型
  可空：Y
  意思：输入时间值,默认本地时间
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Time_TimezoneGet(bool* pbZone, int* pInt_Hour, int* pInt_Minute = NULL, time_t nTime = 0);
/********************************************************************
函数名称：BaseLib_Time_GMTTime
函数功能：获取GMT时间字符串
 参数.一：ptszTime
  In/Out：Out
  类型：字符指针
  可空：N
  意思：导出获取到的GMT时间格式字符串
 参数.二：nTTime
  In/Out：In
  类型：时间类型
  可空：Y
  意思：输入要转换的时间,如果为空,将使用本机时间
 参数.三：pSt_Timer
  In/Out：Out
  类型：数据结构指针
  可空：Y
  意思：输出GMT时间结构体
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Time_GMTTime(XCHAR *ptszTime, time_t nTTime = 0, XENGINE_LIBTIME * pSt_Timer = NULL);
//////////////////////////////////////////////////////////////////////////
/********************************************************************
函数名称：BaseLib_TimeSpan_GetForStu
函数功能：通过数据结构获取时间差
 参数.一：pSt_TimeStart
  In/Out：In
  类型：数据结构指针
  可空：N
  意思：开始时间
 参数.二：pSt_TimeEnd
  In/Out：In
  类型：数据结构指针
  可空：N
  意思：结束时间
 参数.三：pInt_Time
  In/Out：Out
  类型：整数型指针
  可空：N
  意思：输出时间差值
 参数.四：nType
  In/Out：In
  类型：整数型
  可空：Y
  意思：获取结果值类型,0:天数 1:小时 2:分钟 3:秒钟
 参数.五：bChange
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：是否支持交换计算,如果为真,那么将取最大的时间来减去最小时间,而不关心开始和结束
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_TimeSpan_GetForStu(XENGINE_LIBTIME *pSt_TimeStart, XENGINE_LIBTIME *pSt_TimeEnd, __int64x *pInt_Timer, int nType = 0, bool bChange = false);
/********************************************************************
函数名称：BaseLib_TimeSpan_GetForStr
函数功能：通过字符串时间获取时间差
 参数.一：lpszTimeStart
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：开始时间
 参数.二：lpszTimeEnd
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：结束时间
 参数.三：pInt_Time
  In/Out：Out
  类型：整数型指针
  可空：N
  意思：输出时间差值
 参数.四：nType
  In/Out：In
  类型：整数型
  可空：Y
  意思：获取结果值类型,0:天数 1:小时 2:分钟 3:秒钟
 参数.五：bChange
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：是否支持交换计算,如果为真,那么将取最大的时间来减去最小时间,而不关心开始和结束
返回值
  类型：逻辑型
  意思：是否成功
备注：参数二只有天数,小时,分钟和秒才生效,其他值无效,下面的函数一样.
*********************************************************************/
extern "C" bool BaseLib_TimeSpan_GetForStr(LPCXSTR lpszTimeStart, LPCXSTR lpszTimeEnd, __int64x *pInt_Timer, int nType = 0, bool bChange = false);
/********************************************************************
函数名称：BaseLib_TimeSpan_GetForTime
函数功能：通过时间变量获取时间差
 参数.一：nTimeStart
  In/Out：In
  类型：时间类型
  可空：N
  意思：开始时间
 参数.二：nTimeEnd
  In/Out：In
  类型：时间类型
  可空：N
  意思：结束时间
 参数.三：pInt_Time
  In/Out：Out
  类型：整数型指针
  可空：N
  意思：输出时间差值
 参数.四：nType
  In/Out：In
  类型：整数型
  可空：Y
  意思：获取结果值类型,0:天数 1:小时 2:分钟 3:秒钟
 参数.五：bChange
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：是否支持交换计算,如果为真,那么将取最大的时间来减去最小时间,而不关心开始和结束
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_TimeSpan_GetForTime(time_t nTimeStart, time_t nTimeEnd, __int64x *pInt_Timer, int nType = 0, bool bChange = false);
/********************************************************************
函数名称：BaseLib_TimeSpan_CalForStu
函数功能：通过时间结构获得两个时间的总值
 参数.一：pSt_TimeStart
  In/Out：In
  类型：数据结构指针
  可空：N
  意思：开始时间
 参数.二：pSt_TimeEnd
  In/Out：In/Out
  类型：数据结构指针
  可空：N
  意思：输入结束时间,输出他们之间的总值
 参数.三：bAdd
  In/Out：In
  类型：逻辑型
  可空：N
  意思：是相加还是相减
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_TimeSpan_CalForStu(XENGINE_LIBTIME *pSt_TimeStart, XENGINE_LIBTIME *pSt_TimeEnd, bool bAdd = true);
/********************************************************************
函数名称：BaseLib_TimeSpan_CalForStu
函数功能：通过字符串时间获得两个时间的总值
 参数.一：lpszTimeStart
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：开始时间
 参数.二：lpszTimeEnd
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：结束时间
 参数.三：pSt_Time
  In/Out：Out
  类型：数据结构指针
  可空：N
  意思：输出结果
 参数.四：bAdd
  In/Out：In
  类型：逻辑型
  可空：N
  意思：是相加还是相减
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_TimeSpan_CalForStr(LPCXSTR lpszTimeStart, LPCXSTR lpszTimeEnd, XENGINE_LIBTIME *pSt_Time, bool bAdd = true);
/********************************************************************
函数名称：BaseLib_TimeSpan_CalForStu
函数功能：通过时间类型获得两个时间的总值
 参数.一：nTimeStart
  In/Out：In
  类型：时间类型
  可空：N
  意思：开始时间
 参数.二：nTimeEnd
  In/Out：In
  类型：时间类型
  可空：N
  意思：结束时间
 参数.三：pSt_Time
  In/Out：Out
  类型：数据结构指针
  可空：N
  意思：输出结果
 参数.四：bAdd
  In/Out：In
  类型：逻辑型
  可空：N
  意思：是相加还是相减
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_TimeSpan_CalForTime(time_t nTimeStart, time_t nTimeEnd, XENGINE_LIBTIME *pSt_Time, bool bAdd = true);
//////////////////////////////////////////////////////////////////////////
/********************************************************************
函数名称：BaseLib_TimeTigger_Create
函数功能：创建一个触发计时器
 参数.一：fpCall_TTimer
  In/Out：In/Out
  类型：回调函数
  可空：Y
  意思：输入触发回调函数指针.为NULL表示只是一个获取时间间隔的函数
 参数.二：lParam
  In/Out：In/Out
  类型：无类型指针
  可空：Y
  意思：回调函数自定义参数
返回值
  类型：触发器句柄
  意思：输出创建好的句柄
备注：
*********************************************************************/
extern "C" XHANDLE BaseLib_TimeTigger_Create(CALLBACK_XENGINE_LIB_BASELIB_TIME_TRIGGER fpCall_TTimer = NULL, XPVOID lParam = NULL);
/********************************************************************
函数名称：BaseLib_TimeTigger_Set
函数功能：设置添加一个触发器
 参数.一：pxhTimer
  In/Out：In
  类型：触发器句柄
  可空：N
  意思：输入要操作的触发器
 参数.二：nIDEvent
  In/Out：In
  类型：整数型
  可空：N
  意思：输入触发器ID.这个ID不能重复
 参数.三：pSt_TimeTigger
  In/Out：In
  类型：数据结构指针
  可空：N
  意思：输入触发器属性
返回值
  类型：逻辑型
  意思：是否成功
备注：由于时间精度问题,请勿在同一时间设置TIME类型和其他类型,否则可能导致意外
*********************************************************************/
extern "C" bool BaseLib_TimeTigger_Set(XHANDLE pxhTimer, int nIDEvent, XENGINE_LIBTIGGER* pSt_TimeTigger);
/********************************************************************
函数名称：BaseLib_TimeTigger_Get
函数功能：获取一个触发器开始与当前结束时间间隔
 参数.一：pxhTimer
  In/Out：In
  类型：触发器句柄
  可空：N
  意思：输入要操作的触发器
 参数.二：nIDEvent
  In/Out：In
  类型：整数型
  可空：N
  意思：输入触发器ID
 参数.三：pInt_Timer
  In/Out：Out
  类型：整数型指针
  可空：N
  意思：输出时间间隔,根据输入的参数类型决定此类型,支持秒,毫秒,微妙,纳秒
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_TimeTigger_Get(XHANDLE pxhTimer, int nIDEvent, __int64x* pInt_Timer);
/********************************************************************
函数名称：BaseLib_TimeTigger_Del
函数功能：删除一个触发器ID
 参数.一：pxhTimer
  In/Out：In
  类型：触发器句柄
  可空：N
  意思：输入要操作的触发器
 参数.二：nIDEvent
  In/Out：In
  类型：整数型
  可空：N
  意思：输入触发器ID
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_TimeTigger_Del(XHANDLE pxhTimer, int nIDEvent);
/********************************************************************
函数名称：BaseLib_TimeTigger_Destory
函数功能：销毁一个触发器
 参数.一：pxhTimer
  In/Out：In
  类型：触发器句柄
  可空：N
  意思：输入要操作的触发器
返回值
  类型：逻辑型
  意思：是否成功
备注：此操作将删除与之关联的所有ID
*********************************************************************/
extern "C" bool BaseLib_TimeTigger_Destory(XHANDLE pxhTimer);
/************************************************************************/
/*                         内存释放函数                                 */
/************************************************************************/
/********************************************************************
函数名称：BaseLib_Memory_Malloc
函数功能：三级指针内存申请
 参数.一：pppszPoint
  In/Out：Out
  类型：三级指针
  可空：N
  意思：输出申请好的内存,内存会被初始化为0
 参数.二：nCount
  In/Out：In
  类型：整数型
  可空：N
  意思：输入列表个数
 参数.三：nSize
  In/Out：In
  类型：整数型
  可空：N
  意思：输入元素大小
返回值
  类型：逻辑型
  意思：是否成功
备注：用来处理一些特殊导出参数和输入参数.可作为list的代替
*********************************************************************/
extern "C" bool BaseLib_Memory_Malloc(VOID * **pppszPoint, size_t nCount, size_t nSize);
/********************************************************************
函数名称：BaseLib_Memory_Free
函数功能：释放三级指针内存
 参数.一：pppszPoint
  In/Out：In
  类型：三级指针
  可空：N
  意思：输入要操作的内存
 参数.二：nCount
  In/Out：In
  类型：整数型
  可空：N
  意思：输入要操作的元素个数
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Memory_Free(VOID * **pppszPoint, size_t nCount);
/********************************************************************
函数名称：BaseLib_Memory_FreeCStyle
函数功能：释放内存
 参数.一：ppszPoint
  In/Out：In
  类型：字符指针
  可空：N
  意思：要释放的内存
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Memory_FreeCStyle(VOID** ppszPoint);
/************************************************************************/
/*                         版本号操作                                   */
/************************************************************************/
/********************************************************************
函数名称：BaseLib_Version_XNumberStr
函数功能：获取XEngine系统版本的字符串
 参数.一：ptszMsgBuffer
  In/Out：Out
  类型：字符指针
  可空：Y
  意思：输出版本字符串.格式:x.zz.yyy.zzzz
返回值
  类型：字符指针
  意思：返回版本字符串信息
备注：
*********************************************************************/
extern "C" XCHAR* BaseLib_Version_XNumberStr(XCHAR* ptszMsgBuffer = NULL);
/********************************************************************
函数名称：BaseLib_Version_XTypeStr
函数功能：获取发布版本的类型
 参数.一：ptszMsgBuffer
  In/Out：Out
  类型：字符指针
  可空：Y
  意思：导出版本类型,拥有:PT,BT,RC,LTS
返回值
  类型：字符指针
  意思：返回版本类型
备注：
*********************************************************************/
extern "C" XCHAR* BaseLib_Version_XTypeStr(XCHAR* ptszMsgBuffer = NULL);
/********************************************************************
函数名称：BaseLib_Version_BuildTime
函数功能：获取引擎构建时间
 参数.一：ptszMsgBuffer
  In/Out：Out
  类型：字符指针
  可空：Y
  意思：导出编译时间
返回值
  类型：字符指针
  意思：返回时间信息
备注：
*********************************************************************/
extern "C" XCHAR* BaseLib_Version_BuildTime(XCHAR* ptszMsgBuffer = NULL);
/********************************************************************
函数名称：BaseLib_Version_XGetInt
函数功能：获取XEngine系统版本的整数
返回值
  类型：整数型
  意思：返回版本号
备注：
*********************************************************************/
extern "C" __int64x BaseLib_Version_XNumberInt();
/********************************************************************
函数名称：BaseLib_Version_XTypeInt
函数功能：获取XEngine系统类型的整数
返回值
  类型：整数型
  意思：返回版本类型
备注：
*********************************************************************/
extern "C" int BaseLib_Version_XTypeInt();
/********************************************************************
函数名称：BaseLib_Version_XGetStu
函数功能：获取XEngine系统版本的结构
 参数.一：pSt_LibVersion
  In/Out：Out
  类型：数据结构指针
  可空：N
  意思：输出版本结构
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Version_XGetStu(XENGINE_LIBVERSION* pSt_LibVersion);
/************************************************************************/
/*                         版本号操作                                   */
/************************************************************************/
/********************************************************************
函数名称：BaseLib_Environment_Set
函数功能：设置环境变量
 参数.一：lpszENVName
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入环境名称
 参数.二：lpszENVValue
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入环境变量的值
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Environment_Set(LPCXSTR lpszENVName, LPCXSTR lpszENVValue);
/********************************************************************
函数名称：BaseLib_Environment_Get
函数功能：获取环境变量
 参数.一：lpszENVName
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入环境名称
 参数.二：ptszENVValue
  In/Out：Out
  类型：常量字符指针
  可空：N
  意思：输出环境变量
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Environment_Get(LPCXSTR lpszENVName, XCHAR* ptszENVValue);
/********************************************************************
函数名称：BaseLib_Environment_Del
函数功能：删除环境变量
 参数.一：lpszENVName
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入环境名称
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_Environment_Del(LPCXSTR lpszENVName);
/************************************************************************/
/*                         IO输入输出操作                               */
/************************************************************************/
/********************************************************************
函数名称：BaseLib_IO_Create
函数功能：创建一个套接字
 参数.一：phSocket
  In/Out：Out
  类型：套接字句柄
  可空：N
  意思：导出创建成功的套接字
 参数.二：bIsTcp
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：是TCP还是UDP,默认TCP
 参数.三：nIPVer
  In/Out：In
  类型：整数型
  可空：Y
  意思：是IPV4还是IPV6,默认IPV4
 参数.四：bBlock
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：是否是阻塞套接字
返回值
  类型：逻辑型
  意思：是否成功
备注：参数四仅WINDOWS下有效
*********************************************************************/
extern "C" bool BaseLib_IO_Create(XSOCKET* phSocket, bool bIsTcp = true, int nIPVer = 2, bool bBlock = true);
/********************************************************************
函数名称：BaseLib_IO_Bind
函数功能：绑定一个套接字端口
 参数.一：hSocket
  In/Out：In
  类型：套接字句柄
  可空：N
  意思：要绑定的套接字
 参数.二：nPort
  In/Out：In
  类型：整数型
  可空：N
  意思：要绑定的端口
 参数.三：bListen
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：是否启用监听,UDP需要false
 参数.四：nIPVer
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：是IPV4还是IPV6,默认IPV4
 参数.五：lpszIPAddr
  In/Out：In
  类型：常量字符指针
  可空：Y
  意思：绑定到指定IP网卡
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_IO_Bind(XSOCKET hSocket, int nPort, bool bListen = true, int nIPVer = 2, LPCXSTR lpszIPAddr = NULL);
/********************************************************************
函数名称：BaseLib_IO_Send
函数功能：发送数据到一个指定的套接字接口上
 参数.一：hSocket
  In/Out：In
  类型：套接字句柄
  可空：N
  意思：要发送的套接字
 参数.二：lpszMsgBuffer
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：要发送的数据
 参数.三：nMsgLen
  In/Out：In
  类型：整数型
  可空：N
  意思：表示要发送的数据大小
 参数.四：lpszAddr
  In/Out：In
  类型：常量字符指针
  可空：Y
  意思：表示发送的地址,此值有数据表示发送UDP
 参数.五：nPort
  In/Out：In
  类型：整数型
  可空：Y
  意思：发送的端口,配合参数四
 参数.六：nTimeout
  In/Out：In
  类型：整数型
  可空：Y
  意思：表示超时时间,单位秒
 参数.七：nIPVer
  In/Out：In
  类型：整数型
  可空：Y
  意思：表示IP版本
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_IO_Send(XSOCKET hSocket, LPCXSTR lpszMsgBuffer, int nMsgLen, LPCXSTR lpszAddr = NULL, int nPort = 0, int nTimeout = 3, int nIPVer = 2);
/************************************************************************
函数名称：BaseLib_IO_Recv
函数功能：从一套套接字上接受指定的大小数据
  参数一：hSocket
   In/Out：In
   类型：套接字句柄
   可空：N
   意思：要接受的套接字
  参数二：ptszRecvMsg
   In/Out：Out
   类型：字符指针
   可空：N
   意思：接受到的数据缓冲区
  参数三：pInt_MsgLen
   In/Out：In/Out
   类型：整数型指针
   可空：N
   意思：输入：表示接受数据缓冲区的大小，输出：实际接受数据的大小
返回值
  类型：逻辑型
  意思：是否接受成功
备注：
************************************************************************/
extern "C" bool BaseLib_IO_Recv(XSOCKET hSocket, XCHAR* ptszRecvMsg, int* pInt_MsgLen);
/************************************************************************
函数名称：BaseLib_IO_Close
函数功能：关闭套接字
  参数一：hSocket
   In/Out：In
   类型：套接字句柄
   可空：N
   意思：要关闭的套接字
返回值
  类型：逻辑型
  意思：是否关闭成功
备注：
************************************************************************/
extern "C" bool BaseLib_IO_Close(XSOCKET hSocket);
/********************************************************************
函数名称：BaseLib_IO_Block
函数功能：设置阻塞模型
 参数.一：hSocket
  In/Out：In
  类型：XSOCKET句柄
  可空：N
  意思：要设置的XSOCKET
 参数.二：bSet
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：设置阻塞还是设置为非阻塞，默认非阻塞
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_IO_Block(XSOCKET hSocket, bool bSet = true);
/************************************************************************
函数名称：BaseLib_IO_SetReAddr
函数功能：设置地址重用
  参数一：hSocket
   In/Out：In
   类型：套接字句柄
   可空：N
   意思：要设置的套接字
返回值
  类型：逻辑型
  意思：是否设置成功
备注：
************************************************************************/
extern "C" bool BaseLib_IO_SetReAddr(XSOCKET hSocket);
/************************************************************************
函数名称：BaseLib_IO_SetRePort
函数功能：设置端口重用
  参数一：hSocket
   In/Out：In
   类型：套接字句柄
   可空：N
   意思：要设置的套接字
返回值
  类型：逻辑型
  意思：是否设置成功
备注：此函数仅仅在LINUX下可用
************************************************************************/
extern "C" bool BaseLib_IO_SetRePort(XSOCKET hSocket);
/************************************************************************
函数名称：BaseLib_IO_SetTimedOut
函数功能：设置发送和接受超时
  参数一：hSocket
   In/Out：In
   类型：套接字句柄
   可空：N
   意思：要设置的套接字
  参数二：nTimedOut
   In/Out：In
   类型：整数型
   可空：Y
   意思：要设置的超时时间，默认3秒
返回值
  类型：逻辑型
  意思：是否设置成功
备注：
************************************************************************/
extern "C" bool BaseLib_IO_SetTimedOut(XSOCKET hSocket, int nTimedOut = 1);
/************************************************************************
函数名称：BaseLib_IO_KeepAlive
函数功能：设置TCP保活计时器
 参数.一：hSocket
  In/Out：In
  类型：套接字句柄
  可空：N
  意思：要设置的套接字
 参数.二：bSet
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：是否启用还是停止,默认启用
返回值
  类型：逻辑型
  意思：是否启动成功
备注：
************************************************************************/
extern "C" bool BaseLib_IO_KeepAlive(XSOCKET hSocket, bool bSet = true);
/********************************************************************
函数名称：BaseLib_IO_FastStart
函数功能：开启快速传输选项
 参数.一：hSocket
  In/Out：In
  类型：套接字句柄
  可空：N
  意思：输入要操作的套接字
 参数.二：bIsSet
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：开启还是关闭,默认开启
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_IO_FastStart(XSOCKET hSocket, bool bIsSet = true);
/********************************************************************
函数名称：BaseLib_IO_GetBufferSize
函数功能：获取套接字缓冲区大小
 参数.一：hSocket
  In/Out：In
  类型：套接字句柄
  可空：N
  意思：输入要操作的套接字
 参数.二：pInt_SDMax
  In/Out：Out
  类型：整数型指针
  可空：N
  意思：发送缓冲区大小
 参数.三：pInt_RVMax
  In/Out：Out
  类型：整数型指针
  可空：N
  意思：接受缓冲区大小
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_IO_GetBufferSize(XSOCKET hSocket, int* pInt_SDMax = NULL, int* pInt_RVMax = NULL);
/********************************************************************
函数名称：BaseLib_IO_SetBufferSize
函数功能：设置套接字缓冲区大小
 参数.一：hSocket
  In/Out：In
  类型：套接字句柄
  可空：N
  意思：输入要操作的套接字
 参数.二：nSDMax
  In/Out：In
  类型：整数型
  可空：N
  意思：发送缓冲区大小
 参数.三：nRVMax
  In/Out：In
  类型：整数型
  可空：N
  意思：接受缓冲区大小
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_IO_SetBufferSize(XSOCKET hSocket, int nSDMax = 0, int nRVMax = 0);
/********************************************************************
函数名称：BaseLib_IO_Select
函数功能：IO选择模型轮训核心函数
 参数.一：hSocket
  In/Out：In
  类型：套接字句柄
  可空：N
  意思：套轮训的套接字
 参数.二：bRead
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：可读标志
 参数.三：nTimeOut
  In/Out：In
  类型：整数型
  可空：Y
  意思：超时时间，默认100毫秒
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool BaseLib_IO_Select(XSOCKET hSocket, bool bRead = false, int nTimeOut = 100);
