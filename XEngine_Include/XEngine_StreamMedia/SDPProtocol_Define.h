#pragma once
/********************************************************************
//    Created:     2023/11/15  10:24:23
//    File Name:   D:\XEngine\XEngine_SourceCode\XEngine_StreamMedia\StreamMedia_SDPProtocol\SDPProtocol_Define.h
//    File Path:   D:\XEngine\XEngine_SourceCode\XEngine_StreamMedia\StreamMedia_SDPProtocol
//    File Base:   SDPProtocol_Define
//    File Ext:    h
//    Project:     XEngine(网络通信引擎)
//    Author:      qyt
//    Purpose:     SDP协议模块导出
//    History:
*********************************************************************/
//////////////////////////////////////////////////////////////////////////
//                         导出的数据结构
//////////////////////////////////////////////////////////////////////////
typedef struct
{
	int nTrackID;                                                         //通道编号,用于表示媒体通道
	struct  
	{
		XCHAR tszCodecName[64];                                               //编码名册好难过,H264 H265 MPEG4-GENERIC(AAC)
		int nSampleRate;                                                      //采样率
		int nChannel;                                                         //通道个数,音频才需要
	}st_RTPMap;
    //视频媒体信息,如果为NULL,表示没有视频传输
    struct
    {
        XCHAR tszVPSBase[128];                                             //H265
        XCHAR tszSPSBase[128];                                             //经过BASE64编码的SPS信息
        XCHAR tszPPSBase[128];                                             //经过BASE64编码的PPS信息
        XCHAR tszLeaveId[128];                                             //H.264的sps的第1个字节之后的3个字节(不包括第一个字节).如果是H265,表示VPS信息

        int nFrameXSize;                                                  //帧大小,可为0
        int nFrameYSize;                                                  //帧大小,可为0
        int nFrameRate;                                                   //帧率,可为0
        bool bLevelAllow;                                                 //编码级别是否需要
        union
        {
            //H264参数
            struct
            {
                int nPacketMode;                                          //值为 1 时RTP打包H.264的NALU单元必须使用非交错(non-interleaved)封包模式.
            };
            //H265参数
            struct
            {
                XCHAR tszICStr[128];
                int nProSpace;
                int nProID;
                int nFlags;
                int nLevelID;
            };
        };
    }st_FmtpVideo;
	//音频媒体信息,如果为NULL,表示没有音频传输
	struct
	{
		XCHAR tszMode[64];                                                //编码器,AAC-hbr
		int nProfileID;                                                   //profile-level-id,复杂度类型
		int nConfig;                                                      //音频配置,具体参考定义比如AAC的ADTS
		//打包的时候不需要下面的值,采用默认
		int nSizeLen;                                                     //表示本段音频数据占用的字节数,一般13
		int nIndexLen;                                                    //表示本段的序号, 通常0开始,一般3
		int nDeltaLen;                                                    //表示本段序号与上一段序号的差值,一般填写3
        //RTC专用
        int nMinPTime;                                                    //最小封包时间
        int nUseINBandfec;                                                //是否使用带内前向纠错
	}st_FmtpAudio;
    //用于拥塞控制
    bool bGoogRemb;
    bool bTransportCC;
    //用于关键帧请求
    bool bCcmFir;
    //用于重传（NACK）
    bool bNAck;
    //重要帧指示
    bool bNAckPli;
}STREAMMEDIA_SDPPROTOCOL_MEDIAINFO;
typedef struct
{
    XCHAR tszAVType[128];
    XCHAR tszProto[128];
    int nCodec;
    int nCodecNumber;
    int nMidIndex;
    //媒体列表信息支持,WHEP属性
    int nListCount;                                            
    XCHAR** pptszAVList;
}STREAMMEDIA_SDPPROTOCOL_AVMEDIA;
//属性
typedef struct
{
    XCHAR tszAttrKey[128];                                               //某些情况下可能没有KEY,只有值
    XCHAR tszAttrValue[128];
}STREAMMEDIA_SDPPROTOCOL_ATTR;
//别名
typedef struct  
{
    XCHAR tszCNameStr[MAX_PATH];
    XCHAR tszLabelStr[MAX_PATH];
    __int64x nSSrc;
}STREAMMEDIA_SDPPROTOCOL_CNAME;
//////////////////////////////////////////////////////////////////////////
//                         导出的函数
//////////////////////////////////////////////////////////////////////////
extern "C" XLONG SDPProtocol_GetLastError(int *pInt_SysError = NULL);
/************************************************************************/
/*                         SDP打包器导出函数                            */
/************************************************************************/
/********************************************************************
函数名称：SDPProtocol_Packet_Create
函数功能：创建一个SDP会话
 参数.一：pxhToken
  In/Out：Out
  类型：句柄
  可空：N
  意思：输出创建的SDP句柄
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Packet_Create(XNETHANDLE *pxhToken);
/********************************************************************
函数名称：SDPProtocol_Packet_Destory
函数功能：销毁SDP包管理器
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP会话
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Packet_Destory(XNETHANDLE xhToken);
/********************************************************************
函数名称：SDPProtocol_Packet_GetPacket
函数功能：获取组包器当前组包完整内容
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP会话
 参数.二：ptszMsgBuffer
  In/Out：Out
  类型：字符指针
  可空：N
  意思：输出SDP协议缓冲区
 参数.三：pInt_Len
  In/Out：Out
  类型：整数型指针
  可空：N
  意思：输出SDP缓冲区大小
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Packet_GetPacket(XNETHANDLE xhToken, XCHAR *ptszMsgBuffer, int *pInt_Len);
/********************************************************************
函数名称：SDPProtocol_Packet_Owner
函数功能：设置会话标识源
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP会话
 参数.二：lpszUserName
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入用户名
 参数.三：nSessionID
  In/Out：In
  类型：整数型
  可空：N
  意思：输入会话ID,此会话ID将会与会话版本关联,建议使用NTP时间
 参数.四：lpszAddr
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：单播地址
 参数.五：nIPVer
  In/Out：In
  类型：整数型
  可空：Y
  意思：IP版本,可支持IPV4,或者V6,默认V4
返回值
  类型：逻辑型
  意思：是否成功
备注：此函数必须调用
*********************************************************************/
extern "C" bool SDPProtocol_Packet_Owner(XNETHANDLE xhToken, LPCXSTR lpszUserName, __int64x nSessionID, LPCXSTR lpszAddr, int nIPVer = 2);
/********************************************************************
函数名称：SDPProtocol_Packet_ClientInet
函数功能：客户端网络信息封包
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP会话
 参数.二：lpszIPAddr
  In/Out：In
  类型：常量字符指针
  可空：Y
  意思：输入IP地址,空采用OWNER地址
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Packet_ClientInet(XNETHANDLE xhToken, LPCXSTR lpszIPAddr = NULL);
/********************************************************************
函数名称：SDPProtocol_Packet_Session
函数功能：设置会话名称
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP会话
 参数.二：lpszSessionName
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入会话名称
 参数.三：bVideo
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：会话是音频函数视频
返回值
  类型：逻辑型
  意思：是否成功
备注：此函数必须调用
*********************************************************************/
extern "C" bool SDPProtocol_Packet_Session(XNETHANDLE xhToken, LPCXSTR lpszSessionName, bool bVideo = true);
/********************************************************************
函数名称：SDPProtocol_Packet_KeepTime
函数功能：设置包活时间
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP会话
 参数.二：lpszTimeStart
  In/Out：In
  类型：常量字符指针
  可空：Y
  意思：输入NTP开始时间
 参数.二：lpszTimeEnd
  In/Out：In
  类型：常量字符指针
  可空：Y
  意思：输入NTP结束时间
返回值
  类型：逻辑型
  意思：是否成功
备注：此函数必须调用
*********************************************************************/
extern "C" bool SDPProtocol_Packet_KeepTime(XNETHANDLE xhToken, LPCXSTR lpszTimeStart = NULL, LPCXSTR lpszTimeEnd = NULL);
/********************************************************************
函数名称：SDPProtocol_Packet_AddMedia
函数功能：添加媒体信息
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP会话
 参数.二：lpszAVType
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入媒体类型,audio or video
 参数.三：lpszAVTrans
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：指定传输类型,比如:UDP/TLS/RTP/SAVPF或者RTP/AVP
 参数.四：ppptszAVList
  In/Out：In
  类型：三级指针
  可空：N
  意思：媒体编码列表,可以一个或者多个,多个用于WEBRTC
 参数.五：nAVCount
  In/Out：In
  类型：整数型
  可空：N
  意思：列表个数
 参数.六：nMidIndex
  In/Out：In
  类型：整数型
  可空：Y
  意思：设置媒体索引,BUNDLE设置的对应值,-1不启用
 参数.七：nAVPort
  In/Out：In
  类型：整数型
  可空：Y
  意思：设置媒体类型
返回值
  类型：逻辑型
  意思：是否成功
备注：可添加多个支持的编码索引列表,一般用于请求的时候
*********************************************************************/
extern "C" bool SDPProtocol_Packet_AddMedia(XNETHANDLE xhToken, LPCXSTR lpszAVType, LPCXSTR lpszAVTrans, XCHAR * **ppptszAVList, int nAVCount, int nMidIndex = -1, int nAVPort = 0);
/********************************************************************
函数名称：SDPProtocol_Packet_Control
函数功能：打包控制属性
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP会话
 参数.二：nTraceID
  In/Out：In
  类型：整数型
  可空：N
  意思：-1表示*,其他输入ID
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Packet_Control(XNETHANDLE xhToken, int nTraceID);
/********************************************************************
函数名称：SDPProtocol_Packet_OnlyRWFlag
函数功能：打包读写属性
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP会话
 参数.二：bSend
  In/Out：In
  类型：逻辑型
  可空：N
  意思：真为只写,假为只读
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Packet_OnlyRWFlag(XNETHANDLE xhToken, bool bSend = false);
/********************************************************************
函数名称：SDPProtocol_Packet_Bundle
函数功能：打包流绑定属性
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP会话
 参数.二：nIndex1
  In/Out：In
  类型：整数型
  可空：Y
  意思：输入流的MID索引,-1不启用
 参数.三：nIndex2
  In/Out：In
  类型：整数型
  可空：Y
  意思：输入流的MID索引,-1不启用
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Packet_Bundle(XNETHANDLE xhToken, int nIndex1 = 0, int nIndex2 = 1);
/********************************************************************
函数名称：SDPProtocol_Packet_ICEUser
函数功能：打包ICE用户密码属性
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP会话
 参数.二：lpszUserStr
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入用户名
 参数.三：lpszPassStr
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入密码
 参数.四：bOPtionTrickle
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：是否启用ICE候选路径优先发送
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Packet_ICEUser(XNETHANDLE xhToken, LPCXSTR lpszUserStr, LPCXSTR lpszPassStr, bool bOPtionTrickle = false);
/********************************************************************
函数名称：SDPProtocol_Packet_CName
函数功能：打包SSRC的别名
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP会话
 参数.二：nSSrc
  In/Out：In
  类型：整数型
  可空：N
  意思：输入SSRC值
 参数.三：lpszCNameStr
  In/Out：In
  类型：常量字符指针
  可空：Y
  意思：输入别名
 参数.四：lpszLabelStr
  In/Out：In
  类型：常量字符指针
  可空：Y
  意思：输入应用层描述,用于查看
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Packet_CName(XNETHANDLE xhToken, __int64x nSSrc, LPCXSTR lpszCNameStr = NULL, LPCXSTR lpszLabelStr = NULL);
/********************************************************************
函数名称：SDPProtocol_Packet_AudioFmt
函数功能：添加音频属性信息
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP会话
 参数.二：nIndex
  In/Out：In
  类型：整数型
  可空：N
  意思：输入此媒体所属索引号
 参数.三：pSt_SDPMedia
  In/Out：In
  类型：数据结构指针
  可空：N
  意思：输入音频信息
 参数.四：bRTC
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：是否为RTC格式的SDP
返回值
  类型：逻辑型
  意思：是否成功
备注：可选,可添加多个,一般的添加完媒体后就需要添加音视频属性
*********************************************************************/
extern "C" bool SDPProtocol_Packet_AudioFmt(XNETHANDLE xhToken, int nIndex, STREAMMEDIA_SDPPROTOCOL_MEDIAINFO * pSt_SDPMedia, bool bRTC = false);
/********************************************************************
函数名称：SDPProtocol_Packet_AttrVideo
函数功能：添加视频属性信息
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP会话
 参数.二：nIndex
  In/Out：In
  类型：整数型
  可空：N
  意思：输入此媒体所属索引ID
 参数.三：pSt_SDPMedia
  In/Out：In
  类型：数据结构指针
  可空：N
  意思：输入视频信息
 参数.四：bRTC
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：是否为RTC格式的SDP
返回值
  类型：逻辑型
  意思：是否成功
备注：可选,可添加多个,一般的添加完媒体后就需要添加音视频属性
*********************************************************************/
extern "C" bool SDPProtocol_Packet_VideoFmt(XNETHANDLE xhToken, int nIndex, STREAMMEDIA_SDPPROTOCOL_MEDIAINFO * pSt_SDPMedia, bool bRTC = false);
/********************************************************************
函数名称：SDPProtocol_Packet_RtcpComm
函数功能：打包RTCP公共信息
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP会话
 参数.二：bMux
  In/Out：In
  类型：逻辑型
  可空：N
  意思：输入媒体是否可以复用
 参数.三：bRsize
  In/Out：In
  类型：逻辑型
  可空：N
  意思：输入包是否可以重设大小
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Packet_RtcpComm(XNETHANDLE xhToken, bool bMux, bool bRsize);
/********************************************************************
函数名称：SDPProtocol_Packet_RtcpInet
函数功能：打包RTCP网络信息
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP会话
 参数.二：nAVPort
  In/Out：In
  类型：整数型
  可空：N
  意思：映射的媒体端口
 参数.三：lpszIPAddr
  In/Out：In
  类型：常量字符指针
  可空：Y
  意思：输入要打包的网络地址
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Packet_RtcpInet(XNETHANDLE xhToken, int nAVPort, LPCXSTR lpszIPAddr = NULL);
//////////////////////////////////////////////////////////////////////////以下是可选函数
/********************************************************************
函数名称：SDPProtocol_Packet_OptionalMediaName
函数功能：添加一个媒体名称
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP会话
 参数.二：lpszMediaName
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入媒体名称
返回值
  类型：逻辑型
  意思：是否成功
备注：此参数只可使用一次
*********************************************************************/
extern "C" bool SDPProtocol_Packet_OptionalMediaName(XNETHANDLE xhToken, LPCXSTR lpszMediaName);
/********************************************************************
函数名称：SDPProtocol_Packet_OptionalContact
函数功能：联系方式
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP会话
 参数.二：lpszEmailAddr
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入联系人电子邮件
 参数.三：lpszPhoneNumber
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入联系人的电话
返回值
  类型：逻辑型
  意思：是否成功
备注：可选函数,此参数仅允许调用一次
*********************************************************************/
extern "C" bool SDPProtocol_Packet_OptionalContact(XNETHANDLE xhToken, LPCXSTR lpszEmailAddr = NULL, LPCXSTR lpszPhoneNumber = NULL);
/********************************************************************
函数名称：SDPProtocol_Packet_OptionalBandwidth
函数功能：配置SDP带宽信息
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP会话
 参数.二：nValue
  In/Out：In
  类型：整数型
  可空：N
  意思：带宽值,BITS
 参数.三：nType
  In/Out：In
  类型：整数型
  可空：Y
  意思：如果为0,表示此单一会话占用带宽,如果为其他值,表示所有会话占用带宽
返回值
  类型：逻辑型
  意思：是否成功
备注：可选函数,此参数仅允许调用一次
*********************************************************************/
extern "C" bool SDPProtocol_Packet_OptionalBandwidth(XNETHANDLE xhToken, int nValue, int nType = 0);
/********************************************************************
函数名称：SDPProtocol_Packet_OptionalRange
函数功能：播放时间范围选项
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP会话
 参数.二：lpszTimeStart
  In/Out：In
  类型：常量字符指针
  可空：Y
  意思：输入媒体开始时间
 参数.三：lpszTimeEnd
  In/Out：In
  类型：常量字符指针
  可空：Y
  意思：输入媒体结束时间,直播流一般不填写
返回值
  类型：逻辑型
  意思：是否成功
备注：可选函数,此参数仅允许调用一次
*********************************************************************/
extern "C" bool SDPProtocol_Packet_OptionalRange(XNETHANDLE xhToken, LPCXSTR lpszTimeStart = NULL, LPCXSTR lpszTimeEnd = NULL);
/********************************************************************
函数名称：SDPProtocol_Packet_OptionalCandidate
函数功能：WEBRTC的网络连接选项.WEBRTC必带
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP会话
 参数.二：lpszIPAddr
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入服务IP地址
 参数.三：nIPPort
  In/Out：In
  类型：整数型
  可空：N
  意思：输入通信端口
 参数.四：byICEType
  In/Out：In
  类型：字符型
  可空：Y
  意思：输入ICE类型,0为HOST(常用,物理直链),1为srflx(STUN获取NAT转发),2为prflx(通信检测),3为relay(中继候选)
 参数.五：byTransProtocol
  In/Out：In
  类型：字符型
  可空：Y
  意思：传输协议,0为UDP传输,1为TCP
 参数.六：byComponentsID
  In/Out：In
  类型：字符型
  可空：Y
  意思：组件ID,1为RTP,2为RTCP
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Packet_OptionalCandidate(XNETHANDLE xhToken, LPCXSTR lpszIPAddr, int nIPPort, XBYTE byICEType = 0, XBYTE byTransProtocol = 0, XBYTE byComponentsID = 1);
/********************************************************************
函数名称：SDPProtocol_Packet_OptionalAddAttr
函数功能：添加自定义属性
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP会话
 参数.二：lpszKey
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：要添加的属性
 参数.三：lpszValue
  In/Out：In
  类型：常量字符指针
  可空：Y
  意思：要添加的属性对应值,如果此参数为空,表示添加专有属性
返回值
  类型：逻辑型
  意思：是否成功
备注：可选函数,可添加多次
*********************************************************************/
extern "C" bool SDPProtocol_Packet_OptionalAddAttr(XNETHANDLE xhToken, LPCXSTR lpszKey, LPCXSTR lpszValue = NULL);
/************************************************************************/
/*                         SDP解析器导出函数                            */
/************************************************************************/
/********************************************************************
函数名称：SDPProtocol_Parse_Create
函数功能：创建一个SDP协议解析器
 参数.一：pxhToken
  In/Out：Out
  类型：句柄
  可空：N
  意思：导出创建成功的句柄
 参数.二：lpszMsgBuffer
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入要解析的缓冲区
 参数.三：nMsgLen
  In/Out：In
  类型：整数型
  可空：N
  意思：输入要解析的缓冲区大小
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Parse_Create(XNETHANDLE *pxhToken, LPCXSTR lpszMsgBuffer, int nMsgLen);
/********************************************************************
函数名称：SDPProtocol_Parse_Destory
函数功能：销毁一个SDP协议解析器
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Parse_Destory(XNETHANDLE xhToken);
/********************************************************************
函数名称：SDPProtocol_Parse_GetVersion
函数功能：获取版本
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP
 参数.二：pInt_Version
  In/Out：Out
  类型：整数型指针
  可空：N
  意思：输出SDP版本号
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Parse_GetVersion(XNETHANDLE xhToken, int *pInt_Version);
/********************************************************************
函数名称：SDPProtocol_Parse_GetOwner
函数功能：获取源描述
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP
 参数.二：ptszUserName
  In/Out：Out
  类型：字符指针
  可空：N
  意思：输出获取到的用户名
 参数.三：pInt_SessionID
  In/Out：Out
  类型：整数型指针
  可空：N
  意思：会话ID
 参数.四：pInt_SessionVer
  In/Out：Out
  类型：整数型指针
  可空：N
  意思：会话版本
 参数.五：pInt_IPVer
  In/Out：Out
  类型：整数型指针
  可空：N
  意思：IP版本
 参数.六：ptszIPAddr
  In/Out：Out
  类型：字符指针
  可空：N
  意思：导出单播地址
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Parse_GetOwner(XNETHANDLE xhToken, XCHAR *ptszUserName, __int64x *pInt_SessionID, __int64x *pInt_SessionVer, int *pInt_IPVer, XCHAR *ptszIPAddr);
/********************************************************************
函数名称：SDPProtocol_Parse_GetConnect
函数功能：获取连接信息
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP
 参数.二：pInt_IPVer
  In/Out：Out
  类型：整数型指针
  可空：N
  意思：输出IP版本
 参数.三：ptszIPAddr
  In/Out：Out
  类型：字符指针
  可空：N
  意思：导出连接地址
 参数.四：pInt_TTL
  In/Out：Out
  类型：整数型指针
  可空：Y
  意思：导出TTL
 参数.五：pInt_Count
  In/Out：Out
  类型：整数型指针
  可空：N
  意思：导出地址个数
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Parse_GetConnect(XNETHANDLE xhToken, int *pInt_IPVer, XCHAR *ptszIPAddr, int *pInt_TTL = NULL, int *pInt_Count = NULL);
/********************************************************************
函数名称：SDPProtocol_Parse_GetSession
函数功能：获取会话名称
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP
 参数.二：ptszSessionValue
  In/Out：Out
  类型：字符指针
  可空：N
  意思：导出会话信息
 参数.三：ptszSessionName
  In/Out：Out
  类型：字符指针
  可空：N
  意思：导出会话名称
 参数.四：pbVideo
  In/Out：Out
  类型：逻辑型指针
  可空：N
  意思：导出是视频还是音频会话
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Parse_GetSession(XNETHANDLE xhToken, XCHAR* ptszSessionValue, XCHAR* ptszSessionName, bool* pbVideo);
/********************************************************************
函数名称：SDPProtocol_Parse_GetTime
函数功能：获取会话时间
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP
 参数.二：pInt_TimeStart
  In/Out：Out
  类型：整数型指针
  可空：N
  意思：导出NTP开始时间
 参数.三：pInt_TimeEnd
  In/Out：Out
  类型：字符指针
  可空：N
  意思：导出NTP结束时间
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Parse_GetTime(XNETHANDLE xhToken, __int64x* pInt_TimeStart, __int64x* pInt_TimeEnd);
/********************************************************************
函数名称：SDPProtocol_Parse_GetMediaVideo
函数功能：获取视频媒体信息
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP
 参数.二：pppSt_AVMedia
  In/Out：Out
  类型：三级指针
  可空：N
  意思：输出获取到的相关的媒体信息
 参数.三：pInt_ListCount
  In/Out：Out
  类型：整数型指针
  可空：N
  意思：输出媒体信息个数
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Parse_GetAVMedia(XNETHANDLE xhToken, STREAMMEDIA_SDPPROTOCOL_AVMEDIA * **pppSt_AVMedia, int* pInt_ListCount);
/********************************************************************
函数名称：SDPProtocol_Parse_GetAttr
函数功能：获取属性字段
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP
 参数.二：pppSt_ListAttr
  In/Out：Out
  类型：三级指针
  可空：N
  意思：导出获取到的属性列表
 参数.三：pInt_ListCount
  In/Out：Out
  类型：整数型指针
  可空：N
  意思：输出媒体列表个数
返回值
  类型：逻辑型
  意思：是否成功
备注：参数二需要调用基础库的BaseLib_OperatorMemory_Free函数进行内存释放
*********************************************************************/
extern "C" bool SDPProtocol_Parse_GetAttr(XNETHANDLE xhToken, STREAMMEDIA_SDPPROTOCOL_ATTR * **pppSt_ListAttr, int* pInt_ListCount);
/********************************************************************
函数名称：SDPProtocol_Parse_RTPMapVideo
函数功能：视频媒体属性字段解析器
 参数.一：pppSt_ListAttr
  In/Out：In
  类型：三级指针
  可空：N
  意思：输入要解析的列表
 参数.二：nAttrCount
  In/Out：In
  类型：整数型
  可空：N
  意思：输入列表个数
 参数.三：nIndex
  In/Out：In
  类型：整数型
  可空：N
  意思：输入解析的索引值
 参数.四：pSt_SDPMeida
  In/Out：In
  类型：数据结构指针
  可空：N
  意思：输出解析到的视频数据信息
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Parse_RTPMapVideo(STREAMMEDIA_SDPPROTOCOL_ATTR * **pppSt_ListAttr, int nAttrCount, int nIndex, STREAMMEDIA_SDPPROTOCOL_MEDIAINFO * pSt_SDPMeida);
/********************************************************************
函数名称：SDPProtocol_Parse_RTPMapVideo
函数功能：音频媒体属性字段解析器
 参数.一：pppSt_ListAttr
  In/Out：In
  类型：三级指针
  可空：N
  意思：输入要解析的列表
 参数.二：nAttrCount
  In/Out：In
  类型：整数型
  可空：N
  意思：输入列表个数
 参数.三：nIndex
  In/Out：In
  类型：整数型
  可空：N
  意思：输入解析的索引值
 参数.四：pSt_SDPMeida
  In/Out：In
  类型：数据结构指针
  可空：N
  意思：输出解析到的音频数据信息
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Parse_RTPMapAudio(STREAMMEDIA_SDPPROTOCOL_ATTR * **pppSt_ListAttr, int nAttrCount, int nIndex, STREAMMEDIA_SDPPROTOCOL_MEDIAINFO * pSt_SDPMeida);
/********************************************************************
函数名称：SDPProtocol_Parse_RtcpComm
函数功能：获取RTCP公共属性
 参数.一：pppSt_ListAttr
  In/Out：In
  类型：三级指针
  可空：N
  意思：输入要解析的列表
 参数.二：nAttrCount
  In/Out：In
  类型：整数型
  可空：N
  意思：输入列表个数
 参数.三：pbMux
  In/Out：Out
  类型：逻辑型指针
  可空：Y
  意思：是否允许RTCP复用
 参数.四：pbRsize
  In/Out：Out
  类型：逻辑型指针
  可空：Y
  意思：是否允许大小设置
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Parse_RtcpComm(STREAMMEDIA_SDPPROTOCOL_ATTR * **pppSt_ListAttr, int nAttrCount, bool* pbMux = NULL, bool* pbRsize = NULL);
/********************************************************************
函数名称：SDPProtocol_Parse_AttrBundle
函数功能：获取BUNDLE控制属性
 参数.一：pppSt_ListAttr
  In/Out：In
  类型：三级指针
  可空：N
  意思：输入要解析的列表
 参数.二：nAttrCount
  In/Out：In
  类型：整数型
  可空：N
  意思：输入列表个数
 参数.三：pInt_Index1
  In/Out：Out
  类型：整数型指针
  可空：N
  意思：输出索引编号1的索引值,-1表示不起作用
 参数.四：pInt_Index2
  In/Out：Out
  类型：整数型指针
  可空：N
  意思：输出索引编号2的索引值,-1表示不起作用
返回值
  类型：逻辑型
  意思：是否成功
备注：索引值对应的媒体类型可以通过SDPProtocol_Parse_GetAVMedia获得
*********************************************************************/
extern "C" bool SDPProtocol_Parse_AttrBundle(STREAMMEDIA_SDPPROTOCOL_ATTR*** pppSt_ListAttr, int nAttrCount, int* pInt_Index1, int* pInt_Index2);
/********************************************************************
函数名称：SDPProtocol_Parse_AttrICEUser
函数功能：获取ICE用户和密码
 参数.一：pppSt_ListAttr
  In/Out：In
  类型：三级指针
  可空：N
  意思：输入要解析的列表
 参数.二：nAttrCount
  In/Out：In
  类型：整数型
  可空：N
  意思：输入列表个数
 参数.三：ptszICEUser
  In/Out：Out
  类型：字符指针
  可空：N
  意思：输出用户名
 参数.四：ptszICEPass
  In/Out：Out
  类型：字符指针
  可空：N
  意思：输出密码
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Parse_AttrICEUser(STREAMMEDIA_SDPPROTOCOL_ATTR*** pppSt_ListAttr, int nAttrCount, XCHAR* ptszICEUser, XCHAR* ptszICEPass);
/********************************************************************
函数名称：SDPProtocol_Parse_AttrCName
函数功能：获取流的别名
 参数.一：pppSt_ListAttr
  In/Out：In
  类型：三级指针
  可空：N
  意思：输入要解析的列表
 参数.二：nAttrCount
  In/Out：In
  类型：整数型
  可空：N
  意思：输入列表个数
 参数.三：pppSt_CNameList
  In/Out：Out
  类型：三级指针
  可空：N
  意思：输出别名列表
 参数.四：pInt_ListCount
  In/Out：Out
  类型：整数型指针
  可空：N
  意思：输出列表个数
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Parse_AttrCName(STREAMMEDIA_SDPPROTOCOL_ATTR*** pppSt_ListAttr, int nAttrCount, STREAMMEDIA_SDPPROTOCOL_CNAME*** pppSt_CNameList, int* pInt_ListCount);
/********************************************************************
函数名称：SDPProtocol_Parse_AttrFinger
函数功能：获取加密算法信息
 参数.一：pppSt_ListAttr
  In/Out：In
  类型：三级指针
  可空：N
  意思：输入要解析的列表
 参数.二：nAttrCount
  In/Out：In
  类型：整数型
  可空：N
  意思：输入列表个数
 参数.三：ptszAlgorithmKey
  In/Out：Out
  类型：字符指针
  可空：N
  意思：输出算法类型
 参数.四：ptszAlgorithmVlu
  In/Out：Out
  类型：字符指针
  可空：N
  意思：输出算法的值
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Parse_AttrFinger(STREAMMEDIA_SDPPROTOCOL_ATTR*** pppSt_ListAttr, int nAttrCount, XCHAR* ptszAlgorithmKey, XCHAR* ptszAlgorithmVlu);
/********************************************************************
函数名称：SDPProtocol_Parse_OptionalMediaName
函数功能：获取可选的媒体名称信息
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP
 参数.二：ptszMediaName
  In/Out：Out
  类型：字符指针
  可空：N
  意思：导出获取到的媒体名称
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Parse_OptionalMediaName(XNETHANDLE xhToken, XCHAR *ptszMediaName);
/********************************************************************
函数名称：SDPProtocol_Parse_OptionalContact
函数功能：获取可选的联系方式
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP
 参数.二：ptszEmailAddr
  In/Out：Out
  类型：字符指针
  可空：Y
  意思：导出获取到的电子邮件
 参数.三：ptszPhoneNumber
  In/Out：Out
  类型：字符指针
  可空：Y
  意思：导出获取到的电话号码
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Parse_OptionalContact(XNETHANDLE xhToken, XCHAR *ptszEmailAddr = NULL, XCHAR *ptszPhoneNumber = NULL);
/********************************************************************
函数名称：SDPProtocol_Parse_OptionalBandwidth
函数功能：获取可选的带宽信息
 参数.一：xhToken
  In/Out：In
  类型：句柄
  可空：N
  意思：输入要操作的SDP
 参数.二：pInt_Value
  In/Out：Out
  类型：整数型指针
  可空：Y
  意思：导出获取到的带宽值
 参数.三：pInt_Type
  In/Out：Out
  类型：整数型指针
  可空：Y
  意思：导出获取到的带宽类型
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" bool SDPProtocol_Parse_OptionalBandwidth(XNETHANDLE xhToken, int *pInt_Value, int *pInt_Type);