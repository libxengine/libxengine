#pragma once
/********************************************************************
//    Created:     2022/04/18  11:20:40
//    File Name:   D:\XEngine\XEngine_SourceCode\XEngine_Image\XEngine_ImageInformation\ImageInfo_Define.h
//    File Path:   D:\XEngine\XEngine_SourceCode\XEngine_Image\XEngine_ImageInformation
//    File Base:   ImageInfo_Define
//    File Ext:    h
//    Project:     XEngine(网络通信引擎)
//    Author:      qyt
//    Purpose:     图像信息导出定义
//    History:
*********************************************************************/
//////////////////////////////////////////////////////////////////////////
//                            枚举类型
//////////////////////////////////////////////////////////////////////////
typedef enum 
{
	ENUM_XENGINE_IMAGE_COLOR_BGR2BGRA = 0, //!< add alpha channel to RGB or BGR image
	ENUM_XENGINE_IMAGE_COLOR_RGB2RGBA = ENUM_XENGINE_IMAGE_COLOR_BGR2BGRA,

	ENUM_XENGINE_IMAGE_COLOR_BGRA2BGR = 1, //!< remove alpha channel from RGB or BGR image
	ENUM_XENGINE_IMAGE_COLOR_RGBA2RGB = ENUM_XENGINE_IMAGE_COLOR_BGRA2BGR,

	ENUM_XENGINE_IMAGE_COLOR_BGR2RGBA = 2, //!< convert between RGB and BGR color spaces (with or without alpha channel)
	ENUM_XENGINE_IMAGE_COLOR_RGB2BGRA = ENUM_XENGINE_IMAGE_COLOR_BGR2RGBA,

	ENUM_XENGINE_IMAGE_COLOR_RGBA2BGR = 3,
	ENUM_XENGINE_IMAGE_COLOR_BGRA2RGB = ENUM_XENGINE_IMAGE_COLOR_RGBA2BGR,

	ENUM_XENGINE_IMAGE_COLOR_BGR2RGB = 4,
	ENUM_XENGINE_IMAGE_COLOR_RGB2BGR = ENUM_XENGINE_IMAGE_COLOR_BGR2RGB,

	ENUM_XENGINE_IMAGE_COLOR_BGRA2RGBA = 5,
	ENUM_XENGINE_IMAGE_COLOR_RGBA2BGRA = ENUM_XENGINE_IMAGE_COLOR_BGRA2RGBA,

	ENUM_XENGINE_IMAGE_COLOR_BGR2GRAY = 6, //!< convert between RGB/BGR and grayscale, @ref color_convert_rgb_gray "color conversions"
	ENUM_XENGINE_IMAGE_COLOR_RGB2GRAY = 7,
	ENUM_XENGINE_IMAGE_COLOR_GRAY2BGR = 8,
	ENUM_XENGINE_IMAGE_COLOR_GRAY2RGB = ENUM_XENGINE_IMAGE_COLOR_GRAY2BGR,
	ENUM_XENGINE_IMAGE_COLOR_GRAY2BGRA = 9,
	ENUM_XENGINE_IMAGE_COLOR_GRAY2RGBA = ENUM_XENGINE_IMAGE_COLOR_GRAY2BGRA,
	ENUM_XENGINE_IMAGE_COLOR_BGRA2GRAY = 10,
	ENUM_XENGINE_IMAGE_COLOR_RGBA2GRAY = 11,

	ENUM_XENGINE_IMAGE_COLOR_BGR2BGR565 = 12, //!< convert between RGB/BGR and BGR565 (16-bit images)
	ENUM_XENGINE_IMAGE_COLOR_RGB2BGR565 = 13,
	ENUM_XENGINE_IMAGE_COLOR_BGR5652BGR = 14,
	ENUM_XENGINE_IMAGE_COLOR_BGR5652RGB = 15,
	ENUM_XENGINE_IMAGE_COLOR_BGRA2BGR565 = 16,
	ENUM_XENGINE_IMAGE_COLOR_RGBA2BGR565 = 17,
	ENUM_XENGINE_IMAGE_COLOR_BGR5652BGRA = 18,
	ENUM_XENGINE_IMAGE_COLOR_BGR5652RGBA = 19,

	ENUM_XENGINE_IMAGE_COLOR_GRAY2BGR565 = 20, //!< convert between grayscale to BGR565 (16-bit images)
	ENUM_XENGINE_IMAGE_COLOR_BGR5652GRAY = 21,

	ENUM_XENGINE_IMAGE_COLOR_BGR2BGR555 = 22,  //!< convert between RGB/BGR and BGR555 (16-bit images)
	ENUM_XENGINE_IMAGE_COLOR_RGB2BGR555 = 23,
	ENUM_XENGINE_IMAGE_COLOR_BGR5552BGR = 24,
	ENUM_XENGINE_IMAGE_COLOR_BGR5552RGB = 25,
	ENUM_XENGINE_IMAGE_COLOR_BGRA2BGR555 = 26,
	ENUM_XENGINE_IMAGE_COLOR_RGBA2BGR555 = 27,
	ENUM_XENGINE_IMAGE_COLOR_BGR5552BGRA = 28,
	ENUM_XENGINE_IMAGE_COLOR_BGR5552RGBA = 29,

	ENUM_XENGINE_IMAGE_COLOR_GRAY2BGR555 = 30, //!< convert between grayscale and BGR555 (16-bit images)
	ENUM_XENGINE_IMAGE_COLOR_BGR5552GRAY = 31,

	ENUM_XENGINE_IMAGE_COLOR_BGR2XYZ = 32, //!< convert RGB/BGR to CIE XYZ, @ref color_convert_rgb_xyz "color conversions"
	ENUM_XENGINE_IMAGE_COLOR_RGB2XYZ = 33,
	ENUM_XENGINE_IMAGE_COLOR_XYZ2BGR = 34,
	ENUM_XENGINE_IMAGE_COLOR_XYZ2RGB = 35,

	ENUM_XENGINE_IMAGE_COLOR_BGR2YCrCb = 36, //!< convert RGB/BGR to luma-chroma (aka YCC), @ref color_convert_rgb_ycrcb "color conversions"
	ENUM_XENGINE_IMAGE_COLOR_RGB2YCrCb = 37,
	ENUM_XENGINE_IMAGE_COLOR_YCrCb2BGR = 38,
	ENUM_XENGINE_IMAGE_COLOR_YCrCb2RGB = 39,

	ENUM_XENGINE_IMAGE_COLOR_BGR2HSV = 40, //!< convert RGB/BGR to HSV (hue saturation value) with H range 0..180 if 8 bit image, @ref color_convert_rgb_hsv "color conversions"
	ENUM_XENGINE_IMAGE_COLOR_RGB2HSV = 41,

	ENUM_XENGINE_IMAGE_COLOR_BGR2Lab = 44, //!< convert RGB/BGR to CIE Lab, @ref color_convert_rgb_lab "color conversions"
	ENUM_XENGINE_IMAGE_COLOR_RGB2Lab = 45,

	ENUM_XENGINE_IMAGE_COLOR_BGR2Luv = 50, //!< convert RGB/BGR to CIE Luv, @ref color_convert_rgb_luv "color conversions"
	ENUM_XENGINE_IMAGE_COLOR_RGB2Luv = 51,
	ENUM_XENGINE_IMAGE_COLOR_BGR2HLS = 52, //!< convert RGB/BGR to HLS (hue lightness saturation) with H range 0..180 if 8 bit image, @ref color_convert_rgb_hls "color conversions"
	ENUM_XENGINE_IMAGE_COLOR_RGB2HLS = 53,

	ENUM_XENGINE_IMAGE_COLOR_HSV2BGR = 54, //!< backward conversions HSV to RGB/BGR with H range 0..180 if 8 bit image
	ENUM_XENGINE_IMAGE_COLOR_HSV2RGB = 55,

	ENUM_XENGINE_IMAGE_COLOR_Lab2BGR = 56,
	ENUM_XENGINE_IMAGE_COLOR_Lab2RGB = 57,
	ENUM_XENGINE_IMAGE_COLOR_Luv2BGR = 58,
	ENUM_XENGINE_IMAGE_COLOR_Luv2RGB = 59,
	ENUM_XENGINE_IMAGE_COLOR_HLS2BGR = 60, //!< backward conversions HLS to RGB/BGR with H range 0..180 if 8 bit image
	ENUM_XENGINE_IMAGE_COLOR_HLS2RGB = 61,

	ENUM_XENGINE_IMAGE_COLOR_BGR2HSV_FULL = 66, //!< convert RGB/BGR to HSV (hue saturation value) with H range 0..255 if 8 bit image, @ref color_convert_rgb_hsv "color conversions"
	ENUM_XENGINE_IMAGE_COLOR_RGB2HSV_FULL = 67,
	ENUM_XENGINE_IMAGE_COLOR_BGR2HLS_FULL = 68, //!< convert RGB/BGR to HLS (hue lightness saturation) with H range 0..255 if 8 bit image, @ref color_convert_rgb_hls "color conversions"
	ENUM_XENGINE_IMAGE_COLOR_RGB2HLS_FULL = 69,

	ENUM_XENGINE_IMAGE_COLOR_HSV2BGR_FULL = 70, //!< backward conversions HSV to RGB/BGR with H range 0..255 if 8 bit image
	ENUM_XENGINE_IMAGE_COLOR_HSV2RGB_FULL = 71,
	ENUM_XENGINE_IMAGE_COLOR_HLS2BGR_FULL = 72, //!< backward conversions HLS to RGB/BGR with H range 0..255 if 8 bit image
	ENUM_XENGINE_IMAGE_COLOR_HLS2RGB_FULL = 73,

	ENUM_XENGINE_IMAGE_COLOR_LBGR2Lab = 74,
	ENUM_XENGINE_IMAGE_COLOR_LRGB2Lab = 75,
	ENUM_XENGINE_IMAGE_COLOR_LBGR2Luv = 76,
	ENUM_XENGINE_IMAGE_COLOR_LRGB2Luv = 77,

	ENUM_XENGINE_IMAGE_COLOR_Lab2LBGR = 78,
	ENUM_XENGINE_IMAGE_COLOR_Lab2LRGB = 79,
	ENUM_XENGINE_IMAGE_COLOR_Luv2LBGR = 80,
	ENUM_XENGINE_IMAGE_COLOR_Luv2LRGB = 81,

	ENUM_XENGINE_IMAGE_COLOR_BGR2YUV = 82, //!< convert between RGB/BGR and YUV
	ENUM_XENGINE_IMAGE_COLOR_RGB2YUV = 83,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGR = 84,
	ENUM_XENGINE_IMAGE_COLOR_YUV2RGB = 85,

	//! YUV 4:2:0 family to RGB
	ENUM_XENGINE_IMAGE_COLOR_YUV2RGB_NV12 = 90,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGR_NV12 = 91,
	ENUM_XENGINE_IMAGE_COLOR_YUV2RGB_NV21 = 92,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGR_NV21 = 93,
	ENUM_XENGINE_IMAGE_COLOR_YUV420sp2RGB = ENUM_XENGINE_IMAGE_COLOR_YUV2RGB_NV21,
	ENUM_XENGINE_IMAGE_COLOR_YUV420sp2BGR = ENUM_XENGINE_IMAGE_COLOR_YUV2BGR_NV21,

	ENUM_XENGINE_IMAGE_COLOR_YUV2RGBA_NV12 = 94,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGRA_NV12 = 95,
	ENUM_XENGINE_IMAGE_COLOR_YUV2RGBA_NV21 = 96,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGRA_NV21 = 97,
	ENUM_XENGINE_IMAGE_COLOR_YUV420sp2RGBA = ENUM_XENGINE_IMAGE_COLOR_YUV2RGBA_NV21,
	ENUM_XENGINE_IMAGE_COLOR_YUV420sp2BGRA = ENUM_XENGINE_IMAGE_COLOR_YUV2BGRA_NV21,

	ENUM_XENGINE_IMAGE_COLOR_YUV2RGB_YV12 = 98,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGR_YV12 = 99,
	ENUM_XENGINE_IMAGE_COLOR_YUV2RGB_IYUV = 100,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGR_IYUV = 101,
	ENUM_XENGINE_IMAGE_COLOR_YUV2RGB_I420 = ENUM_XENGINE_IMAGE_COLOR_YUV2RGB_IYUV,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGR_I420 = ENUM_XENGINE_IMAGE_COLOR_YUV2BGR_IYUV,
	ENUM_XENGINE_IMAGE_COLOR_YUV420p2RGB = ENUM_XENGINE_IMAGE_COLOR_YUV2RGB_YV12,
	ENUM_XENGINE_IMAGE_COLOR_YUV420p2BGR = ENUM_XENGINE_IMAGE_COLOR_YUV2BGR_YV12,

	ENUM_XENGINE_IMAGE_COLOR_YUV2RGBA_YV12 = 102,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGRA_YV12 = 103,
	ENUM_XENGINE_IMAGE_COLOR_YUV2RGBA_IYUV = 104,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGRA_IYUV = 105,
	ENUM_XENGINE_IMAGE_COLOR_YUV2RGBA_I420 = ENUM_XENGINE_IMAGE_COLOR_YUV2RGBA_IYUV,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGRA_I420 = ENUM_XENGINE_IMAGE_COLOR_YUV2BGRA_IYUV,
	ENUM_XENGINE_IMAGE_COLOR_YUV420p2RGBA = ENUM_XENGINE_IMAGE_COLOR_YUV2RGBA_YV12,
	ENUM_XENGINE_IMAGE_COLOR_YUV420p2BGRA = ENUM_XENGINE_IMAGE_COLOR_YUV2BGRA_YV12,

	ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_420 = 106,
	ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_NV21 = ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_420,
	ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_NV12 = ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_420,
	ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_YV12 = ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_420,
	ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_IYUV = ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_420,
	ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_I420 = ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_420,
	ENUM_XENGINE_IMAGE_COLOR_YUV420sp2GRAY = ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_420,
	ENUM_XENGINE_IMAGE_COLOR_YUV420p2GRAY = ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_420,

	//! YUV 4:2:2 family to RGB
	ENUM_XENGINE_IMAGE_COLOR_YUV2RGB_UYVY = 107,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGR_UYVY = 108,
	//ENUM_XENGINE_IMAGE_COLOR_YUV2RGB_VYUY = 109,
	//ENUM_XENGINE_IMAGE_COLOR_YUV2BGR_VYUY = 110,
	ENUM_XENGINE_IMAGE_COLOR_YUV2RGB_Y422 = ENUM_XENGINE_IMAGE_COLOR_YUV2RGB_UYVY,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGR_Y422 = ENUM_XENGINE_IMAGE_COLOR_YUV2BGR_UYVY,
	ENUM_XENGINE_IMAGE_COLOR_YUV2RGB_UYNV = ENUM_XENGINE_IMAGE_COLOR_YUV2RGB_UYVY,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGR_UYNV = ENUM_XENGINE_IMAGE_COLOR_YUV2BGR_UYVY,

	ENUM_XENGINE_IMAGE_COLOR_YUV2RGBA_UYVY = 111,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGRA_UYVY = 112,
	//ENUM_XENGINE_IMAGE_COLOR_YUV2RGBA_VYUY = 113,
	//ENUM_XENGINE_IMAGE_COLOR_YUV2BGRA_VYUY = 114,
	ENUM_XENGINE_IMAGE_COLOR_YUV2RGBA_Y422 = ENUM_XENGINE_IMAGE_COLOR_YUV2RGBA_UYVY,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGRA_Y422 = ENUM_XENGINE_IMAGE_COLOR_YUV2BGRA_UYVY,
	ENUM_XENGINE_IMAGE_COLOR_YUV2RGBA_UYNV = ENUM_XENGINE_IMAGE_COLOR_YUV2RGBA_UYVY,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGRA_UYNV = ENUM_XENGINE_IMAGE_COLOR_YUV2BGRA_UYVY,

	ENUM_XENGINE_IMAGE_COLOR_YUV2RGB_YUY2 = 115,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGR_YUY2 = 116,
	ENUM_XENGINE_IMAGE_COLOR_YUV2RGB_YVYU = 117,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGR_YVYU = 118,
	ENUM_XENGINE_IMAGE_COLOR_YUV2RGB_YUYV = ENUM_XENGINE_IMAGE_COLOR_YUV2RGB_YUY2,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGR_YUYV = ENUM_XENGINE_IMAGE_COLOR_YUV2BGR_YUY2,
	ENUM_XENGINE_IMAGE_COLOR_YUV2RGB_YUNV = ENUM_XENGINE_IMAGE_COLOR_YUV2RGB_YUY2,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGR_YUNV = ENUM_XENGINE_IMAGE_COLOR_YUV2BGR_YUY2,

	ENUM_XENGINE_IMAGE_COLOR_YUV2RGBA_YUY2 = 119,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGRA_YUY2 = 120,
	ENUM_XENGINE_IMAGE_COLOR_YUV2RGBA_YVYU = 121,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGRA_YVYU = 122,
	ENUM_XENGINE_IMAGE_COLOR_YUV2RGBA_YUYV = ENUM_XENGINE_IMAGE_COLOR_YUV2RGBA_YUY2,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGRA_YUYV = ENUM_XENGINE_IMAGE_COLOR_YUV2BGRA_YUY2,
	ENUM_XENGINE_IMAGE_COLOR_YUV2RGBA_YUNV = ENUM_XENGINE_IMAGE_COLOR_YUV2RGBA_YUY2,
	ENUM_XENGINE_IMAGE_COLOR_YUV2BGRA_YUNV = ENUM_XENGINE_IMAGE_COLOR_YUV2BGRA_YUY2,

	ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_UYVY = 123,
	ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_YUY2 = 124,
	//CV_YUV2GRAY_VYUY    = CV_YUV2GRAY_UYVY,
	ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_Y422 = ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_UYVY,
	ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_UYNV = ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_UYVY,
	ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_YVYU = ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_YUY2,
	ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_YUYV = ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_YUY2,
	ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_YUNV = ENUM_XENGINE_IMAGE_COLOR_YUV2GRAY_YUY2,

	//! alpha premultiplication
	ENUM_XENGINE_IMAGE_COLOR_RGBA2mRGBA = 125,
	ENUM_XENGINE_IMAGE_COLOR_mRGBA2RGBA = 126,

	//! RGB to YUV 4:2:0 family
	ENUM_XENGINE_IMAGE_COLOR_RGB2YUV_I420 = 127,
	ENUM_XENGINE_IMAGE_COLOR_BGR2YUV_I420 = 128,
	ENUM_XENGINE_IMAGE_COLOR_RGB2YUV_IYUV = ENUM_XENGINE_IMAGE_COLOR_RGB2YUV_I420,
	ENUM_XENGINE_IMAGE_COLOR_BGR2YUV_IYUV = ENUM_XENGINE_IMAGE_COLOR_BGR2YUV_I420,

	ENUM_XENGINE_IMAGE_COLOR_RGBA2YUV_I420 = 129,
	ENUM_XENGINE_IMAGE_COLOR_BGRA2YUV_I420 = 130,
	ENUM_XENGINE_IMAGE_COLOR_RGBA2YUV_IYUV = ENUM_XENGINE_IMAGE_COLOR_RGBA2YUV_I420,
	ENUM_XENGINE_IMAGE_COLOR_BGRA2YUV_IYUV = ENUM_XENGINE_IMAGE_COLOR_BGRA2YUV_I420,
	ENUM_XENGINE_IMAGE_COLOR_RGB2YUV_YV12 = 131,
	ENUM_XENGINE_IMAGE_COLOR_BGR2YUV_YV12 = 132,
	ENUM_XENGINE_IMAGE_COLOR_RGBA2YUV_YV12 = 133,
	ENUM_XENGINE_IMAGE_COLOR_BGRA2YUV_YV12 = 134,

	//! Demosaicing, see @ref color_convert_bayer "color conversions" for additional information
	ENUM_XENGINE_IMAGE_COLOR_BayerBG2BGR = 46, //!< equivalent to RGGB Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerGB2BGR = 47, //!< equivalent to GRBG Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerRG2BGR = 48, //!< equivalent to BGGR Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerGR2BGR = 49, //!< equivalent to GBRG Bayer pattern

	ENUM_XENGINE_IMAGE_COLOR_BayerRGGB2BGR = ENUM_XENGINE_IMAGE_COLOR_BayerBG2BGR,
	ENUM_XENGINE_IMAGE_COLOR_BayerGRBG2BGR = ENUM_XENGINE_IMAGE_COLOR_BayerGB2BGR,
	ENUM_XENGINE_IMAGE_COLOR_BayerBGGR2BGR = ENUM_XENGINE_IMAGE_COLOR_BayerRG2BGR,
	ENUM_XENGINE_IMAGE_COLOR_BayerGBRG2BGR = ENUM_XENGINE_IMAGE_COLOR_BayerGR2BGR,

	ENUM_XENGINE_IMAGE_COLOR_BayerRGGB2RGB = ENUM_XENGINE_IMAGE_COLOR_BayerBGGR2BGR,
	ENUM_XENGINE_IMAGE_COLOR_BayerGRBG2RGB = ENUM_XENGINE_IMAGE_COLOR_BayerGBRG2BGR,
	ENUM_XENGINE_IMAGE_COLOR_BayerBGGR2RGB = ENUM_XENGINE_IMAGE_COLOR_BayerRGGB2BGR,
	ENUM_XENGINE_IMAGE_COLOR_BayerGBRG2RGB = ENUM_XENGINE_IMAGE_COLOR_BayerGRBG2BGR,

	ENUM_XENGINE_IMAGE_COLOR_BayerBG2RGB = ENUM_XENGINE_IMAGE_COLOR_BayerRG2BGR, //!< equivalent to RGGB Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerGB2RGB = ENUM_XENGINE_IMAGE_COLOR_BayerGR2BGR, //!< equivalent to GRBG Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerRG2RGB = ENUM_XENGINE_IMAGE_COLOR_BayerBG2BGR, //!< equivalent to BGGR Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerGR2RGB = ENUM_XENGINE_IMAGE_COLOR_BayerGB2BGR, //!< equivalent to GBRG Bayer pattern

	ENUM_XENGINE_IMAGE_COLOR_BayerBG2GRAY = 86, //!< equivalent to RGGB Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerGB2GRAY = 87, //!< equivalent to GRBG Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerRG2GRAY = 88, //!< equivalent to BGGR Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerGR2GRAY = 89, //!< equivalent to GBRG Bayer pattern

	ENUM_XENGINE_IMAGE_COLOR_BayerRGGB2GRAY = ENUM_XENGINE_IMAGE_COLOR_BayerBG2GRAY,
	ENUM_XENGINE_IMAGE_COLOR_BayerGRBG2GRAY = ENUM_XENGINE_IMAGE_COLOR_BayerGB2GRAY,
	ENUM_XENGINE_IMAGE_COLOR_BayerBGGR2GRAY = ENUM_XENGINE_IMAGE_COLOR_BayerRG2GRAY,
	ENUM_XENGINE_IMAGE_COLOR_BayerGBRG2GRAY = ENUM_XENGINE_IMAGE_COLOR_BayerGR2GRAY,

	//! Demosaicing using Variable Number of Gradients
	ENUM_XENGINE_IMAGE_COLOR_BayerBG2BGR_VNG = 62, //!< equivalent to RGGB Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerGB2BGR_VNG = 63, //!< equivalent to GRBG Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerRG2BGR_VNG = 64, //!< equivalent to BGGR Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerGR2BGR_VNG = 65, //!< equivalent to GBRG Bayer pattern

	ENUM_XENGINE_IMAGE_COLOR_BayerRGGB2BGR_VNG = ENUM_XENGINE_IMAGE_COLOR_BayerBG2BGR_VNG,
	ENUM_XENGINE_IMAGE_COLOR_BayerGRBG2BGR_VNG = ENUM_XENGINE_IMAGE_COLOR_BayerGB2BGR_VNG,
	ENUM_XENGINE_IMAGE_COLOR_BayerBGGR2BGR_VNG = ENUM_XENGINE_IMAGE_COLOR_BayerRG2BGR_VNG,
	ENUM_XENGINE_IMAGE_COLOR_BayerGBRG2BGR_VNG = ENUM_XENGINE_IMAGE_COLOR_BayerGR2BGR_VNG,

	ENUM_XENGINE_IMAGE_COLOR_BayerRGGB2RGB_VNG = ENUM_XENGINE_IMAGE_COLOR_BayerBGGR2BGR_VNG,
	ENUM_XENGINE_IMAGE_COLOR_BayerGRBG2RGB_VNG = ENUM_XENGINE_IMAGE_COLOR_BayerGBRG2BGR_VNG,
	ENUM_XENGINE_IMAGE_COLOR_BayerBGGR2RGB_VNG = ENUM_XENGINE_IMAGE_COLOR_BayerRGGB2BGR_VNG,
	ENUM_XENGINE_IMAGE_COLOR_BayerGBRG2RGB_VNG = ENUM_XENGINE_IMAGE_COLOR_BayerGRBG2BGR_VNG,

	ENUM_XENGINE_IMAGE_COLOR_BayerBG2RGB_VNG = ENUM_XENGINE_IMAGE_COLOR_BayerRG2BGR_VNG, //!< equivalent to RGGB Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerGB2RGB_VNG = ENUM_XENGINE_IMAGE_COLOR_BayerGR2BGR_VNG, //!< equivalent to GRBG Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerRG2RGB_VNG = ENUM_XENGINE_IMAGE_COLOR_BayerBG2BGR_VNG, //!< equivalent to BGGR Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerGR2RGB_VNG = ENUM_XENGINE_IMAGE_COLOR_BayerGB2BGR_VNG, //!< equivalent to GBRG Bayer pattern

	//! Edge-Aware Demosaicing
	ENUM_XENGINE_IMAGE_COLOR_BayerBG2BGR_EA = 135, //!< equivalent to RGGB Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerGB2BGR_EA = 136, //!< equivalent to GRBG Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerRG2BGR_EA = 137, //!< equivalent to BGGR Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerGR2BGR_EA = 138, //!< equivalent to GBRG Bayer pattern

	ENUM_XENGINE_IMAGE_COLOR_BayerRGGB2BGR_EA = ENUM_XENGINE_IMAGE_COLOR_BayerBG2BGR_EA,
	ENUM_XENGINE_IMAGE_COLOR_BayerGRBG2BGR_EA = ENUM_XENGINE_IMAGE_COLOR_BayerGB2BGR_EA,
	ENUM_XENGINE_IMAGE_COLOR_BayerBGGR2BGR_EA = ENUM_XENGINE_IMAGE_COLOR_BayerRG2BGR_EA,
	ENUM_XENGINE_IMAGE_COLOR_BayerGBRG2BGR_EA = ENUM_XENGINE_IMAGE_COLOR_BayerGR2BGR_EA,

	ENUM_XENGINE_IMAGE_COLOR_BayerRGGB2RGB_EA = ENUM_XENGINE_IMAGE_COLOR_BayerBGGR2BGR_EA,
	ENUM_XENGINE_IMAGE_COLOR_BayerGRBG2RGB_EA = ENUM_XENGINE_IMAGE_COLOR_BayerGBRG2BGR_EA,
	ENUM_XENGINE_IMAGE_COLOR_BayerBGGR2RGB_EA = ENUM_XENGINE_IMAGE_COLOR_BayerRGGB2BGR_EA,
	ENUM_XENGINE_IMAGE_COLOR_BayerGBRG2RGB_EA = ENUM_XENGINE_IMAGE_COLOR_BayerGRBG2BGR_EA,

	ENUM_XENGINE_IMAGE_COLOR_BayerBG2RGB_EA = ENUM_XENGINE_IMAGE_COLOR_BayerRG2BGR_EA, //!< equivalent to RGGB Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerGB2RGB_EA = ENUM_XENGINE_IMAGE_COLOR_BayerGR2BGR_EA, //!< equivalent to GRBG Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerRG2RGB_EA = ENUM_XENGINE_IMAGE_COLOR_BayerBG2BGR_EA, //!< equivalent to BGGR Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerGR2RGB_EA = ENUM_XENGINE_IMAGE_COLOR_BayerGB2BGR_EA, //!< equivalent to GBRG Bayer pattern

	//! Demosaicing with alpha channel
	ENUM_XENGINE_IMAGE_COLOR_BayerBG2BGRA = 139, //!< equivalent to RGGB Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerGB2BGRA = 140, //!< equivalent to GRBG Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerRG2BGRA = 141, //!< equivalent to BGGR Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerGR2BGRA = 142, //!< equivalent to GBRG Bayer pattern

	ENUM_XENGINE_IMAGE_COLOR_BayerRGGB2BGRA = ENUM_XENGINE_IMAGE_COLOR_BayerBG2BGRA,
	ENUM_XENGINE_IMAGE_COLOR_BayerGRBG2BGRA = ENUM_XENGINE_IMAGE_COLOR_BayerGB2BGRA,
	ENUM_XENGINE_IMAGE_COLOR_BayerBGGR2BGRA = ENUM_XENGINE_IMAGE_COLOR_BayerRG2BGRA,
	ENUM_XENGINE_IMAGE_COLOR_BayerGBRG2BGRA = ENUM_XENGINE_IMAGE_COLOR_BayerGR2BGRA,

	ENUM_XENGINE_IMAGE_COLOR_BayerRGGB2RGBA = ENUM_XENGINE_IMAGE_COLOR_BayerBGGR2BGRA,
	ENUM_XENGINE_IMAGE_COLOR_BayerGRBG2RGBA = ENUM_XENGINE_IMAGE_COLOR_BayerGBRG2BGRA,
	ENUM_XENGINE_IMAGE_COLOR_BayerBGGR2RGBA = ENUM_XENGINE_IMAGE_COLOR_BayerRGGB2BGRA,
	ENUM_XENGINE_IMAGE_COLOR_BayerGBRG2RGBA = ENUM_XENGINE_IMAGE_COLOR_BayerGRBG2BGRA,

	ENUM_XENGINE_IMAGE_COLOR_BayerBG2RGBA = ENUM_XENGINE_IMAGE_COLOR_BayerRG2BGRA, //!< equivalent to RGGB Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerGB2RGBA = ENUM_XENGINE_IMAGE_COLOR_BayerGR2BGRA, //!< equivalent to GRBG Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerRG2RGBA = ENUM_XENGINE_IMAGE_COLOR_BayerBG2BGRA, //!< equivalent to BGGR Bayer pattern
	ENUM_XENGINE_IMAGE_COLOR_BayerGR2RGBA = ENUM_XENGINE_IMAGE_COLOR_BayerGB2BGRA, //!< equivalent to GBRG Bayer pattern

	ENUM_XENGINE_IMAGE_COLOR_COLORCVT_MAX = 143
}ENUM_XENGINE_IMAGE_COLOR_INFO;
//////////////////////////////////////////////////////////////////////////
//                            导出结构
//////////////////////////////////////////////////////////////////////////
//图像基本属性
typedef struct  
{
	int nWidth;                      //宽
	int nHeigth;                     //高
	int nChannel;                    //通道
}IMAGEINFO_BASEATTR;
//图像高级属性
typedef struct
{
	__int64x nSize;                  //文件大小
	int nDepth;                      //位深度
	int nItem;                       //单个数据长度
	int nType;                       //数据类型，字符串形式
}IMAGEINFO_EXTENDATTR;
//////////////////////////////////////////////////////////////////////////
//                            导出函数
//////////////////////////////////////////////////////////////////////////
extern "C" DWORD ImageInfo_GetLastError(int *pInt_SysError = NULL);
/************************************************************************/
/*                          图像信息修改函数                            */
/************************************************************************/
/********************************************************************
函数名称：ImageInfo_Set_FileResolution
函数功能：文件分辨率调整
 参数.一：lpszSrcFile
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入原始文件
 参数.二：nWidth
  In/Out：In
  类型：整数型
  可空：N
  意思：输入调整后的宽
 参数.三：nHeight
  In/Out：In
  类型：整数型
  可空：N
  意思：输入调整后的高
 参数.四：lpszDstFile
  In/Out：In
  类型：常量字符指针
  可空：Y
  意思：输入目标文件,如果为NULL,修改原始文件
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" BOOL ImageInfo_Set_FileResolution(LPCSTR lpszSrcFile, int nWidth, int nHeight, LPCSTR lpszDstFile = NULL);
/********************************************************************
函数名称：ImageInfo_Set_FileFlip
函数功能：图像翻转
 参数.一：lpszSrcFile
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入原始文件
 参数.二：nOPMethod
  In/Out：In
  类型：整数型
  可空：N
  意思：输入图像翻转方式,0:上下,1:左右,-1:上下左右同时
 参数.三：lpszDstFile
  In/Out：In
  类型：常量字符指针
  可空：Y
  意思：输入目标文件,如果为NULL,修改原始文件
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" BOOL ImageInfo_Set_FileFlip(LPCSTR lpszSrcFile, int nOPMethod, LPCSTR lpszDstFile = NULL);
/********************************************************************
函数名称：ImageInfo_Set_FileColorCvt
函数功能：色彩空间转换
 参数.一：lpszSrcFile
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入原始文件
 参数.二：enColorInfo
  In/Out：In
  类型：枚举型
  可空：N
  意思：输入要转换的类型
 参数.三：lpszDstFile
  In/Out：In
  类型：常量字符指针
  可空：Y
  意思：输入目标文件,如果为NULL,修改原始文件
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" BOOL ImageInfo_Set_FileColorCvt(LPCSTR lpszSrcFile, ENUM_XENGINE_IMAGE_COLOR_INFO enColorInfo, LPCSTR lpszDstFile = NULL);
/********************************************************************
函数名称：ImageInfo_Set_FileLigth
函数功能：亮度与对比度调整
 参数.一：lpszSrcFile
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入原始文件
 参数.二：nGamma
  In/Out：In
  类型：整数型
  可空：N
  意思：输入要调整的值
 参数.三：lpszDstFile
  In/Out：In
  类型：常量字符指针
  可空：Y
  意思：输入目标文件,如果为NULL,修改原始文件
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" BOOL ImageInfo_Set_FileLigth(LPCSTR lpszSrcFile, int nGamma, LPCSTR lpszDstFile = NULL);
/********************************************************************
函数名称：ImageInfo_Set_FileChannle
函数功能：多文件通道操作
 参数.一：lpszSrcFile
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入要操作的文件
 参数.二：ppptszDstFile
  In/Out：In
  类型：三级指针
  可空：N
  意思：输入要操作的目标文件,由用户管理内存
 参数.三：nListCount
  In/Out：In
  类型：整数型
  可空：N
  意思：输入文件个数
 参数.四：bCombo
  In/Out：In
  类型：逻辑型
  可空：Y
  意思：组合还是分离,组合参数二输入要组合的文件列表,分离参数二输入分离的文件
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" BOOL ImageInfo_Set_FileChannle(LPCSTR lpszSrcFile, CHAR*** ppptszDstFile, int nListCount, BOOL bCombo = FALSE);
/********************************************************************
函数名称：ImageInfo_Set_MemoryResolution
函数功能：内存分辨率调整
 参数.一：lpszMsgBuffer
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入原始图像
 参数.二：nWidth
  In/Out：In
  类型：整数型
  可空：N
  意思：输入调整后的宽
 参数.三：nHeight
  In/Out：In
  类型：整数型
  可空：N
  意思：输入调整后的高
 参数.四：pInt_MsgLen
  In/Out：In/Out
  类型：整数型指针
  可空：N
  意思：输入原始图像内存大小,输出调整后的内存大小
 参数.五：ptszMsgBuffer
  In/Out：Out
  类型：字符指针
  可空：N
  意思：输出调整后的图像内存
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" BOOL ImageInfo_Set_MemoryResolution(LPCSTR lpszMsgBuffer, int nWidth, int nHeight, int* pInt_MsgLen, CHAR* ptszMsgBuffer);
/************************************************************************/
/*                          图像信息修改函数                            */
/************************************************************************/
/********************************************************************
函数名称：ImageInfo_Get_Attr
函数功能：获取图像属性
 参数.一：lpszFile
  In/Out：In
  类型：常量字符指针
  可空：N
  意思：输入图像地址
 参数.二：pSt_BaseInfo
  In/Out：Out
  类型：数据结构指针
  可空：Y
  意思：输出图像基本信息
 参数.三：pSt_ExtAttr
  In/Out：Out
  类型：数据结构指针
  可空：Y
  意思：输出图像扩展信息
返回值
  类型：逻辑型
  意思：是否成功
备注：
*********************************************************************/
extern "C" BOOL ImageInfo_Get_Attr(LPCSTR lpszFile, IMAGEINFO_BASEATTR* pSt_BaseInfo = NULL, IMAGEINFO_EXTENDATTR* pSt_ExtAttr = NULL);